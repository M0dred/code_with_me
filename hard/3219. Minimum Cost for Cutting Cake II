class Solution:
    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:
        # Sort the cuts in descending order for a greedy approach
        horizontalCut.sort(reverse=True)
        verticalCut.sort(reverse=True)

        h_pieces, v_pieces = 1, 1  # Start with one piece each
        total_cost = 0

        h, v = 0, 0  # Pointers for horizontal and vertical cuts

        while h < len(horizontalCut) and v < len(verticalCut):
            if horizontalCut[h] >= verticalCut[v]:
                # Take the horizontal cut
                total_cost += horizontalCut[h] * v_pieces
                h_pieces += 1
                h += 1
            else:
                # Take the vertical cut
                total_cost += verticalCut[v] * h_pieces
                v_pieces += 1
                v += 1

        # Add remaining horizontal cuts
        while h < len(horizontalCut):
            total_cost += horizontalCut[h] * v_pieces
            h_pieces += 1
            h += 1

        # Add remaining vertical cuts
        while v < len(verticalCut):
            total_cost += verticalCut[v] * h_pieces
            v_pieces += 1
            v += 1

        return total_cost

'''
Approach:
1. Sort both `horizontalCut` and `verticalCut` in descending order to prioritize the most expensive cuts first.
2. Use two pointers to process the cuts:
   - Compare the cost of the current horizontal cut and vertical cut.
   - Apply the cut with the higher cost to minimize total cost while maximizing the number of affected pieces.
3. Track the number of horizontal and vertical pieces (`h_pieces` and `v_pieces`) to calculate the total cost of each cut dynamically.
4. After processing the main cuts, handle any remaining cuts in `horizontalCut` or `verticalCut`.

Time Complexity:
- Sorting: O((m + n) log(m + n)), where `m` is the length of `horizontalCut` and `n` is the length of `verticalCut`.
- Processing cuts: O(m + n), as each cut is processed once.
- Total: O((m + n) log(m + n)).

Space Complexity:
- O(1), as the solution uses constant additional space.
'''

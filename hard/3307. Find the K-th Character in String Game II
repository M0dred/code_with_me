class Solution:
    def kthCharacter(self, k: int, operations: List[int]) -> str:
        # Convert to 0-based index
        k = k - 1
        # Initialize shifts to track alphabet increments
        shifts = 0
        
        # Process operations in reverse
        for i in range(len(operations) - 1, -1, -1):
            # Length of string after i operations is 2^i
            n = 1 << i
            # If k is in second half (k >= n/2)
            if k >= n:
                # Adjust index to equivalent position in previous string
                k -= n
                # If operation was 1, add a shift
                if operations[i] == 1:
                    shifts += 1
        
        # Start with 'a' (0), apply shifts modulo 26
        char_value = (0 + shifts) % 26
        # Convert to character
        return chr(ord('a') + char_value)

'''
Approach:
1. Convert k to 0-based index (k-1).
2. Initialize shifts to track how many times the kth character was shifted (+1 mod 26).
3. Iterate through operations in reverse:
   - Compute string length after i operations as n = 2^i.
   - If k >= n/2, the character is in the second half:
     - Adjust k to k - n/2 for the previous string's equivalent position.
     - If operation[i] == 1, increment shifts (since second half is shifted by +1).
   - If k < n/2, the character is in the first half, keep k unchanged.
4. Start with 'a' (value 0), apply total shifts modulo 26.
5. Convert the final value to a character ('a' + value).
6. Return the kth character.

Time Complexity: O(m), where m is the length of operations (m <= 100). We iterate through operations once.

Space Complexity: O(1), using only constant extra space for variables.
'''

from typing import List

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        # Ensure nums1 is the smaller array to optimize the binary search
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        
        m, n = len(nums1), len(nums2)
        low, high = 0, m  # Binary search range for nums1
        
        while low <= high:
            # Partition nums1 into two parts
            partition1 = (low + high) // 2
            # Partition nums2 into two parts such that the left half has (m + n + 1) // 2 elements
            partition2 = (m + n + 1) // 2 - partition1
            
            # Handle edge cases where partitions are at the boundaries
            max_left1 = float('-inf') if partition1 == 0 else nums1[partition1 - 1]
            min_right1 = float('inf') if partition1 == m else nums1[partition1]
            
            max_left2 = float('-inf') if partition2 == 0 else nums2[partition2 - 1]
            min_right2 = float('inf') if partition2 == n else nums2[partition2]
            
            # Check if the partition is correct
            if max_left1 <= min_right2 and max_left2 <= min_right1:
                # If the total number of elements is even, return the average of the two middle elements
                if (m + n) % 2 == 0:
                    return (max(max_left1, max_left2) + min(min_right1, min_right2)) / 2
                # If the total number of elements is odd, return the middle element
                else:
                    return max(max_left1, max_left2)
            # If the partition is incorrect, adjust the binary search range
            elif max_left1 > min_right2:
                high = partition1 - 1  # Move the partition to the left
            else:
                low = partition1 + 1  # Move the partition to the right
        
        # If no valid partition is found, raise an error (should not happen for valid inputs)
        raise ValueError("Input arrays are not sorted or invalid input.")

'''
Approach:
1. Binary Search on the Smaller Array:
   - We perform a binary search on the smaller array (nums1) to find the correct partition.
   - The partition divides the combined array into two halves such that the left half contains all elements less than or equal to the right half.

2. Partition Calculation:
   - For each partition in nums1, we calculate the corresponding partition in nums2 such that the total number of elements in the left half is (m + n + 1) // 2.

3. Validation:
   - We check if the partition is correct by ensuring that the maximum element on the left side (max_left1 and max_left2) is less than or equal to the minimum element on the right side (min_right1 and min_right2).

4. Median Calculation:
   - If the total number of elements is even, the median is the average of the two middle elements.
   - If the total number of elements is odd, the median is the middle element.

Time Complexity: O(log(min(m, n)))
Space Complexity: O(1)
'''

class Solution:
    def colorTheGrid(self, m: int, n: int) -> int:
        MOD = 10**9 + 7
        
        # Generate all valid colorings for a single row
        def generate_valid_rows():
            rows = []
            def dfs(row, pos):
                if pos == m:
                    rows.append(row[:])
                    return
                for color in range(3):  # 0=red, 1=green, 2=blue
                    if pos > 0 and row[pos-1] == color:
                        continue  # Skip if adjacent colors match
                    row.append(color)
                    dfs(row, pos + 1)
                    row.pop()
            dfs([], 0)
            return rows
        
        # Check if two rows can be adjacent (no vertical matches)
        def can_be_adjacent(row1, row2):
            return all(row1[i] != row2[i] for i in range(m))
        
        # Generate valid rows
        valid_rows = generate_valid_rows()
        row_count = len(valid_rows)
        
        # Compute compatibility between rows
        compatible = [[False] * row_count for _ in range(row_count)]
        for i in range(row_count):
            for j in range(row_count):
                if can_be_adjacent(valid_rows[i], valid_rows[j]):
                    compatible[i][j] = True
        
        # DP: dp[i][j] = number of ways to color first i columns ending with row j
        dp = [1] * row_count  # First column: each row config is valid
        for col in range(1, n):
            new_dp = [0] * row_count
            for j in range(row_count):  # Current row j
                for i in range(row_count):  # Previous row i
                    if compatible[i][j]:
                        new_dp[j] = (new_dp[j] + dp[i]) % MOD
            dp = new_dp
        
        # Sum all possible endings
        result = sum(dp) % MOD
        return result

'''
Approach:
1. Generate valid row colorings:
   - Each row of m cells must have no adjacent cells with the same color.
   - Use DFS to generate all valid colorings (3 choices per cell, check horizontal adjacency).
2. Check row compatibility:
   - Two rows can be adjacent if no vertically adjacent cells have the same color.
   - Precompute a compatibility matrix for all pairs of valid rows.
3. Dynamic programming:
   - dp[j] = number of ways to color first i columns ending with row configuration j.
   - Initialize dp[j] = 1 for first column (all valid rows possible).
   - For each column i from 1 to n-1:
     - For each current row j, sum dp[i-1][k] for all compatible previous rows k.
   - Use modulo 10^9 + 7 to handle large numbers.
4. Sum dp[j] for all j to get total ways to color n columns.
Time Complexity: O(3^m + n * R^2) where R = number of valid rows (≤ 3^m), m ≤ 5.
   - Generating rows: O(3^m).
   - Compatibility matrix: O(R^2 * m).
   - DP: O(n * R^2).
Space Complexity: O(R^2 + R) for compatibility matrix and dp array.
'''

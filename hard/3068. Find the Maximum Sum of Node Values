class Solution:
    def maximumValueSum(self, nums: List[int], k: int, edges: List[List[int]]) -> int:
        # Initialize result as the sum of original node values
        res = sum(nums)
        
        # Compute difference: (nums[i] XOR k) - nums[i] for each node
        diff = [(x ^ k) - x for x in nums]
        
        # Sort differences in ascending order
        diff.sort()
        
        # Iterate from largest differences (end of sorted array)
        i = len(diff) - 1
        while i > 0 and diff[i] + diff[i - 1] >= 0:
            # If sum of two largest differences is non-negative, include them
            res += diff[i] + diff[i - 1]
            i -= 2
        
        # Return maximum sum
        return res

'''
Approach:
1. Compute initial sum of nums (no operations applied).
2. Calculate difference for each node: (nums[i] XOR k) - nums[i].
   - This represents the change in sum if the node is XORed with k.
3. Sort differences in ascending order.
4. Iterate from the largest differences (end of array):
   - If the sum of the two largest remaining differences is non-negative:
     - Add both differences to the result (equivalent to applying XOR on an edge).
     - Move to next pair (i -= 2).
   - Stop if sum is negative or no pairs remain.
5. Return the final sum.
Time Complexity: O(n log n) - dominated by sorting the differences array.
Space Complexity: O(n) - for the differences array.
'''

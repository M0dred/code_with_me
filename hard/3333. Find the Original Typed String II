class Solution:
    def possibleStringCount(self, word: str, k: int) -> int:
        mod = 10**9 + 7
        n, cnt = len(word), 1
        freq = []
        
        # Count runs of consecutive identical characters
        for i in range(1, n):
            if word[i] == word[i - 1]:
                cnt += 1
            else:
                freq.append(cnt)
                cnt = 1
        freq.append(cnt)
        
        # Compute total ways (product of run lengths)
        ans = 1
        for o in freq:
            ans = (ans * o) % mod
        
        # If number of runs >= k, all strings have length >= k
        if len(freq) >= k:
            return ans
        
        # DP: f[j] = ways to get length j, g[j] = ways to get length <= j
        f, g = [1] + [0] * (k - 1), [1] * k
        for i in range(len(freq)):
            f_new = [0] * k
            # Compute ways to achieve length j with i+1 runs
            for j in range(1, k):
                f_new[j] = g[j - 1]
                if j - freq[i] - 1 >= 0:
                    f_new[j] = (f_new[j] - g[j - freq[i] - 1]) % mod
            # Compute prefix sum for g_new
            g_new = [f_new[0]] + [0] * (k - 1)
            for j in range(1, k):
                g_new[j] = (g_new[j - 1] + f_new[j]) % mod
            f, g = f_new, g_new
        
        # Return total ways minus ways with length < k
        return (ans - g[k - 1]) % mod

'''
Approach:
1. Identify runs of consecutive identical characters in word and store their lengths in freq.
2. Compute total ways as the product of run lengths (each run i contributes 1 to freq[i] characters).
3. If number of runs >= k, all strings have length >= number of runs >= k, so return total ways.
4. Use dynamic programming to count invalid strings (length < k):
   - Initialize f[0] = 1, g[0] = 1 for 0 length with 0 runs.
   - For each run i with length freq[i]:
     - f_new[j] = ways to achieve length j: take g[j-1] (length j-1 with one less character) minus g[j-freq[i]-1] (exclude lengths too small).
     - g_new[j] = prefix sum of f_new[j] (ways to achieve length <= j).
   - Update f and g for next run.
5. Subtract g[k-1] (ways to achieve length < k) from total ways, modulo 10^9 + 7.
6. Return the result.

Time Complexity: O(n + r * k), where n is word length (for run counting), r is number of runs (r <= n), and k <= 2000. DP iterates r times with O(k) work per run.

Space Complexity: O(k) for the f and g arrays, plus O(r) for freq.
'''

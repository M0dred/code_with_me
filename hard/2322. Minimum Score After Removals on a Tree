class Solution:
    def calc(self, a: int, b: int, c: int) -> int:
        return max(a, b, c) - min(a, b, c)

    def minimumScore(self, nums: List[int], edges: List[List[int]]) -> int:
        n = len(nums)
        cnt = 0
        sum_xor = [0] * n
        tin = [0] * n
        tout = [0] * n
        adj = [[] for _ in range(n)]

        # Build adjacency list
        for u, v in edges:
            adj[u].append(v)
            adj[v].append(u)

        # DFS to compute subtree XORs and in/out times
        def dfs(x: int, fa: int):
            nonlocal cnt
            tin[x] = cnt
            cnt += 1
            sum_xor[x] = nums[x]
            for y in adj[x]:
                if y == fa:
                    continue
                dfs(y, x)
                sum_xor[x] ^= sum_xor[y]
            tout[x] = cnt

        dfs(0, -1)

        # Iterate over pairs of nodes
        res = float("inf")
        for u in range(1, n):
            for v in range(u + 1, n):
                # Case 1: v is in u's subtree
                if tin[v] > tin[u] and tin[v] < tout[u]:
                    res = min(
                        res,
                        self.calc(
                            sum_xor[0] ^ sum_xor[u],  # Rest of tree
                            sum_xor[u] ^ sum_xor[v],  # u's subtree minus v's
                            sum_xor[v],               # v's subtree
                        ),
                    )
                # Case 2: u is in v's subtree
                elif tin[u] > tin[v] and tin[u] < tout[v]:
                    res = min(
                        res,
                        self.calc(
                            sum_xor[0] ^ sum_xor[v],  # Rest of tree
                            sum_xor[v] ^ sum_xor[u],  # v's subtree minus u's
                            sum_xor[u],               # u's subtree
                        ),
                    )
                # Case 3: u and v are in disjoint subtrees
                else:
                    res = min(
                        res,
                        self.calc(
                            sum_xor[0] ^ sum_xor[u] ^ sum_xor[v],  # Rest of tree
                            sum_xor[u],                            # u's subtree
                            sum_xor[v],                            # v's subtree
                        ),
                    )
        return res

'''
Approach:
The problem requires finding the minimum score after removing two edges from a tree to form three components, where the score is the difference between the maximum and minimum XOR values of the components.
1. Build an adjacency list representation of the tree using the edges.
2. Use DFS to precompute:
   - Subtree XOR values (sum_xor) for each node by XORing the node's value with its children's subtree XORs.
   - In/out times (tin, tout) to determine ancestor relationships in O(1).
3. Iterate over all pairs of nodes (u, v) where u < v:
   - Use in/out times to determine the relationship between subtrees rooted at u and v:
     - If v is in u's subtree (tin[u] < tin[v] < tout[u]), components are: v's subtree, u's subtree minus v's, rest of the tree.
     - If u is in v's subtree (tin[v] < tin[u] < tout[v]), components are: u's subtree, v's subtree minus u's, rest of the tree.
     - If disjoint, components are: u's subtree, v's subtree, rest of the tree.
   - Compute XORs for the three components using sum_xor and total tree XOR (sum_xor[0]).
   - Calculate the score using calc(a, b, c) as max(a, b, c) - min(a, b, c).
4. Track the minimum score across all node pairs.
5. Return the minimum score.
Time Complexity: O(n^2), where n is the number of nodes, due to enumerating O(n^2) node pairs and O(1) XOR and ancestor checks per pair.
Space Complexity: O(n) for the adjacency list, sum_xor, tin, and tout arrays.
'''

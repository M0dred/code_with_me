from collections import deque

class Solution:
    def maximumInvitations(self, favorite: List[int]) -> int:
        # Calculate the maximum distance from a given start node
        def _bfs(start_node: int, visited_nodes: set, reversed_graph: List[List[int]]) -> int:
            # Queue to store nodes and their distances
            queue = deque([(start_node, 0)])
            max_distance = 0
            while queue:
                current_node, current_distance = queue.popleft()
                for neighbor in reversed_graph[current_node]:
                    if neighbor in visited_nodes:
                        continue  # Skip already visited nodes
                    visited_nodes.add(neighbor)
                    queue.append((neighbor, current_distance + 1))
                    max_distance = max(max_distance, current_distance + 1)
            return max_distance

        num_people = len(favorite)
        reversed_graph = [[] for _ in range(num_people)]
        # Build the reversed graph where each node points to its admirers
        for person in range(num_people):
            reversed_graph[favorite[person]].append(person)

        longest_cycle = 0
        two_cycle_invitations = 0
        visited = [False] * num_people

        # Find all cycles in the graph
        for person in range(num_people):
            if not visited[person]:
                # Track visited persons and their distances
                visited_persons = {}
                current_person = person
                distance = 0
                while True:
                    if visited[current_person]:
                        break
                    visited[current_person] = True
                    visited_persons[current_person] = distance
                    distance += 1
                    next_person = favorite[current_person]
                    # Cycle detected
                    if next_person in visited_persons:
                        cycle_length = distance - visited_persons[next_person]
                        longest_cycle = max(longest_cycle, cycle_length)
                        # Handle cycles of length 2
                        if cycle_length == 2:
                            visited_nodes = {current_person, next_person}
                            two_cycle_invitations += (
                                2
                                + _bfs(next_person, visited_nodes, reversed_graph)
                                + _bfs(current_person, visited_nodes, reversed_graph)
                            )
                        break
                    current_person = next_person

        return max(longest_cycle, two_cycle_invitations)

'''
Approach:
1. The problem requires finding the maximum number of employees that can be invited to a meeting such that each employee sits next to their favorite person.
2. We model the problem as a directed graph where each employee points to their favorite person.
3. We detect cycles in the graph, as cycles represent groups of employees who can sit in a circle, each next to their favorite person.
4. We handle mutual favorites (cycles of length 2) separately, as they can be combined with other mutual pairs or paths.
5. We calculate the maximum number of employees that can be invited by considering all possible combinations of cycles and paths.

Time Complexity: O(n)
- We visit each employee once to detect cycles and mutual pairs.

Space Complexity: O(n)
- We use additional space to store visited status, depth, and mutual pairs.
'''

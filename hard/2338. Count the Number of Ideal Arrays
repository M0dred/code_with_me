from math import comb

class Solution:
    def idealArrays(self, n: int, maxValue: int) -> int:
        MOD = 10**9 + 7
        max_len = 14  # max length of multiplicative chains considering constraints

        # Precompute combination C(n, k) using Pascal's triangle
        combs = [[0] * (max_len + 1) for _ in range(n + 1)]
        for i in range(n + 1):
            combs[i][0] = 1
            for j in range(1, min(i, max_len) + 1):
                combs[i][j] = (combs[i - 1][j] + combs[i - 1][j - 1]) % MOD

        dp = [1] * (maxValue + 1)
        result = 0

        for length in range(1, max_len + 1):
            total = sum(dp[1:]) % MOD
            result = (result + total * combs[n - 1][length - 1]) % MOD

            new_dp = [0] * (maxValue + 1)
            for i in range(1, maxValue + 1):
                for j in range(i * 2, maxValue + 1, i):
                    new_dp[j] = (new_dp[j] + dp[i]) % MOD
            dp = new_dp

        return result

'''
Approach:
1. Each valid ideal array can be represented as a multiplicative chain starting from a number and multiplying by its divisors.
2. For each number i from 1 to maxValue, we simulate the count of multiplicative sequences of length up to log(maxValue).
3. Use dynamic programming to count how many sequences end at each value at every length.
4. For each valid sequence of length l, we can place it in C(n-1, l-1) ways in an array of size n.
5. Precompute all binomial coefficients using Pascal's triangle.
6. Multiply total counts of sequences of each length with their corresponding combinations and accumulate to the result.

Time Complexity: O(maxValue * log(maxValue))
Space Complexity: O(maxValue)
'''

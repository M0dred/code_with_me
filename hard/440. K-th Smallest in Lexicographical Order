class Solution:
    def findKthNumber(self, n: int, k: int) -> int:
        def count_steps(prefix: int, n: int) -> int:
            # Count numbers with given prefix within [1, n]
            curr = prefix
            next_prefix = prefix + 1
            steps = 0
            while curr <= n:
                # Count numbers between curr and next_prefix (or n+1 if smaller)
                steps += min(n + 1, next_prefix) - curr
                curr *= 10
                next_prefix *= 10
            return steps
        
        curr = 1
        k = k - 1  # Convert to 0-based index
        
        while k > 0:
            steps = count_steps(curr, n)
            if steps <= k:
                # Skip this prefix, move to next sibling
                k -= steps
                curr += 1
            else:
                # Go deeper into this prefix
                k -= 1
                curr *= 10
        
        return curr

'''
Approach:
1. Define count_steps(prefix, n) to count how many numbers in [1, n] start with prefix:
   - Initialize curr as prefix and next_prefix as prefix + 1.
   - For each level (prefix, prefix*10, ...), add the count of numbers between curr and min(n+1, next_prefix).
2. Start with curr = 1 and adjust k to 0-based (k -= 1).
3. While k > 0:
   - Compute steps = count_steps(curr, n).
   - If steps <= k, skip this prefix (subtract steps from k, increment curr).
   - Else, go deeper into this prefix (decrement k, multiply curr by 10).
4. Return curr as the kth lexicographically smallest number.

Time Complexity: O(log n * log n), as we iterate at most log n times (depth of the number tree), and count_steps performs log n iterations for powers of 10.
Space Complexity: O(1), as we only use a constant amount of extra space for variables.
'''

class Solution:
    def candy(self, ratings: List[int]) -> int:
        n = len(ratings)
        candies = [1] * n
        
        # Left to right: ensure higher-rated child gets more than left neighbor
        for i in range(1, n):
            if ratings[i] > ratings[i-1]:
                candies[i] = candies[i-1] + 1
        
        # Right to left: ensure higher-rated child gets more than right neighbor
        for i in range(n-2, -1, -1):
            if ratings[i] > ratings[i+1]:
                candies[i] = max(candies[i], candies[i+1] + 1)
        
        return sum(candies)

'''
Approach:
1. Initialize candies array with 1 candy per child (minimum requirement).
2. First pass (left to right): If current child's rating is higher than the previous child's, assign one more candy than the previous child.
3. Second pass (right to left): If current child's rating is higher than the next child's, assign at least one more candy than the next child, ensuring it doesn't decrease the candies already assigned.
4. Sum the candies array to get the minimum total candies needed.

Time Complexity: O(n), where n is the length of ratings, due to two passes through the array and a final sum.
Space Complexity: O(n) for the candies array to store the number of candies for each child.
'''

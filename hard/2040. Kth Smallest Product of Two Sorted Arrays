from bisect import bisect_left, bisect_right

class Solution:
    def f(self, nums2: List[int], x1: int, v: int) -> int:
        # Count nums2[j] where x1 * nums2[j] <= v
        if x1 > 0:
            # For positive x1, need nums2[j] <= v/x1
            return bisect_right(nums2, v // x1)
        elif x1 < 0:
            # For negative x1, need nums2[j] >= v/x1
            return len(nums2) - bisect_left(nums2, -(-v // x1))
        else:
            # For x1 == 0, count all nums2[j] if v >= 0
            return len(nums2) if v >= 0 else 0

    def kthSmallestProduct(self, nums1: List[int], nums2: List[int], k: int) -> int:
        # Initialize binary search range
        left, right = -10**10, 10**10
        n1 = len(nums1)
        # Binary search for kth smallest product
        while left <= right:
            mid = (left + right) // 2
            # Count products <= mid
            count = 0
            for i in range(n1):
                count += self.f(nums2, nums1[i], mid)
            # If count < k, search higher
            if count < k:
                left = mid + 1
            # If count >= k, search lower
            else:
                right = mid - 1
        # Return left as the kth smallest product
        return left

'''
Approach:
1. Define helper function f(nums2, x1, v) to count products x1 * nums2[j] <= v:
   - If x1 > 0, use bisect_right to count nums2[j] <= v/x1.
   - If x1 < 0, use bisect_left to count nums2[j] >= v/x1 (i.e., len(nums2) - index of first >= v/x1).
   - If x1 == 0, return len(nums2) if v >= 0, else 0.
2. Binary search for the kth smallest product in range [-10^10, 10^10]:
   - For each mid, count products <= mid using f for each nums1[i].
   - If count < k, search higher (left = mid + 1).
   - If count >= k, search lower (right = mid - 1).
3. Return left as the kth smallest product after convergence.

Time Complexity: O(n * log m * log M), where n is len(nums1), m is len(nums2), and M is the product range (10^10). Binary search on nums2 takes O(log m) per nums1[i], and outer binary search is O(log M).

Space Complexity: O(1), using constant extra space for pointers and variables.
'''

from typing import List
from heapq import heappush, heappop, heapify

class Solution:
    def maxSpending(self, values: List[List[int]]) -> int:
        m, n = len(values), len(values[0])  # m: number of shops, n: items per shop

        # Initialize the heap explicitly
        q = []  # Min-heap to track the least valuable items
        for i in range(m):
            # Add the least valuable (rightmost) item from each shop to the heap
            heappush(q, (values[i][-1], i, n - 1))  # (value, shop index, item index)

        ans = 0  # Variable to store the total spending

        # Process all items over m * n turns
        for turn in range(1, m * n + 1):
            val, shop, idx = heappop(q)  # Get the least valuable item from the heap
            ans += val * turn  # Add its cost to the total spending

            # If there are more items in the shop, push the next available item into the heap
            if idx > 0:
                heappush(q, (values[shop][idx - 1], shop, idx - 1))

        return ans

"""
Approach:
1. Explicitly initialize the min-heap:
   - Loop through each shop to push the least valuable (rightmost) item into the heap.
   - The heap stores (value, shop index, item index) to track items and their shops.

2. For each turn (day):
   - Pop the least valuable item from the heap.
   - Multiply its value by the day to calculate its price and add it to the total spending.

3. After buying an item:
   - Check if the shop still has more items left.
   - If so, push the next available item from the same shop into the heap.

4. Repeat the process until all items are purchased.

5. Return the total spending.

Complexity:
- Time Complexity: O(m * n * log(m)):
  - Heap operations take O(log m), and there are m * n items to process.
- Space Complexity: O(m): The heap stores one item per shop.
"""

from typing import List, Set, Tuple

class Solution:
    def countCombinations(self, pieces: List[str], positions: List[List[int]]) -> int:
        directions = {
            "rook": [(0, 1), (0, -1), (1, 0), (-1, 0)],
            "bishop": [(1, 1), (1, -1), (-1, 1), (-1, -1)],
            "queen": [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)],
        }

        def get_moves(piece: str, start: Tuple[int, int]) -> Set[Tuple[int, int]]:
            """Get all possible moves for a piece from a starting position."""
            r, c = start
            moves = {(r, c)}  # Include the starting position as a valid destination
            for dr, dc in directions[piece]:
                nr, nc = r, c
                while 1 <= nr + dr <= 8 and 1 <= nc + dc <= 8:
                    nr += dr
                    nc += dc
                    moves.add((nr, nc))
            return moves

        def is_valid_combination(comb: List[Tuple[int, int]]) -> bool:
            """Check if a combination of moves is valid."""
            max_steps = 8  # Maximum distance a piece can travel
            for t in range(1, max_steps + 1):
                seen = set()
                for i, (r, c) in enumerate(comb):
                    sr, sc = positions[i]
                    dr = r - sr
                    dc = c - sc
                    steps = min(t, max(abs(dr), abs(dc)))
                    nr = sr + (dr // abs(dr) if dr != 0 else 0) * steps
                    nc = sc + (dc // abs(dc) if dc != 0 else 0) * steps
                    if (nr, nc) in seen:
                        return False
                    seen.add((nr, nc))
            return True

        # Generate all possible moves for each piece
        all_moves = [list(get_moves(pieces[i], tuple(positions[i]))) for i in range(len(pieces))]

        # Generate all combinations of destinations
        from itertools import product
        all_combinations = product(*all_moves)

        # Check each combination for validity
        valid_count = 0
        for comb in all_combinations:
            if is_valid_combination(comb):
                valid_count += 1

        return valid_count
        
'''
Explanation

get_moves Function:
For a given piece and starting position, calculate all reachable squares based on the piece's movement rules.

is_valid_combination Function:
Simulate the simultaneous movement of all pieces in a move combination.
Check at each step whether any two pieces occupy the same square.

Generate Combinations:
Use itertools.product to generate all possible combinations of destinations for the pieces.

Count Valid Combinations:
For each combination, use is_valid_combination to verify if itâ€™s valid. Increment the count for valid combinations.
'''

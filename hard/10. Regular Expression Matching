class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # Initialize a 2D array to store the DP table
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]

        # An empty pattern matches an empty string
        dp[0][0] = True

        # A '*' in the pattern can match an empty string
        for j in range(1, len(p) + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 2]

        # Fill in the rest of the DP table
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                # If the current characters match or the pattern has a '.'
                if p[j - 1] in {s[i - 1], '.'}:
                    dp[i][j] = dp[i - 1][j - 1]
                # If the pattern has a '*'
                elif p[j - 1] == '*':
                    # If the '*' matches zero characters
                    dp[i][j] = dp[i][j - 2]
                    # If the '*' matches one or more characters
                    if p[j - 2] in {s[i - 1], '.'}:
                        dp[i][j] = dp[i][j] or dp[i - 1][j]

        # The answer is stored in the bottom-right corner of the DP table
        return dp[len(s)][len(p)]


'''
Approach:
Dynamic Programming (DP)

Step-by-Step:

1. Initialize a 2D DP table `dp` with dimensions `(len(s) + 1) x (len(p) + 1)`.
2. Set `dp[0][0]` to `True`, since an empty pattern matches an empty string.
3. Fill in the first row of the table. If `p[j - 1]` is `'*'`, set `dp[0][j]` to `dp[0][j - 2]`.
4. Fill in the rest of the table. For each cell `dp[i][j]`, check if the current characters in `s` and `p` match or if the pattern has a `'.'`. If they match, set `dp[i][j]` to `dp[i - 1][j - 1]`. If the pattern has a `'*'`, check if the `'*'` matches zero characters or one or more characters.
5. The answer is stored in the bottom-right corner of the table, `dp[len(s)][len(p)]`.

Time Complexity: O(len(s) * len(p))
Space Complexity: O(len(s) * len(p))
'''

class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        """
        Returns the shortest string that has both str1 and str2 as subsequences.
        """
        m, n = len(str1), len(str2)

        # Step 1: Compute the LCS (Longest Common Subsequence) using DP
        dp = [[""] * (n + 1) for _ in range(m + 1)]

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if str1[i - 1] == str2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + str1[i - 1]
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], key=len)

        # Step 2: Construct the Shortest Common Supersequence using LCS
        lcs = dp[m][n]
        i, j, k = 0, 0, 0
        result = []

        for c in lcs:
            while i < m and str1[i] != c:
                result.append(str1[i])
                i += 1
            while j < n and str2[j] != c:
                result.append(str2[j])
                j += 1
            result.append(c)
            i += 1
            j += 1

        # Append remaining characters
        result.extend(str1[i:])
        result.extend(str2[j:])

        return "".join(result)

# Example Usage:
# obj = Solution()
# result = obj.shortestCommonSupersequence("abac", "cab")  # Output: "cabac"
# print(result)

'''
Approach:
1. Find the Longest Common Subsequence (LCS):
   - Compute the LCS using dynamic programming.
   - dp[i][j] stores the LCS of str1[:i] and str2[:j].

2. Construct the Shortest Common Supersequence (SCS):
   - Traverse str1 and str2, inserting non-LCS characters into result.
   - Append the characters from str1 and str2 while merging them along the LCS.

Time Complexity: O(m * n)
- The LCS computation takes O(m * n).
- Constructing the SCS takes O(m + n).

Space Complexity: O(m * n)
- The DP table stores intermediate LCS values.
''' 

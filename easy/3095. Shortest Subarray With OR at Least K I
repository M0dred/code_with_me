class Solution:
    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:
        n = len(nums)
        min_length = float('inf')

        for start in range(n):
            current_or = 0
            for end in range(start, n):
                current_or |= nums[end]
                if current_or >= k:
                    min_length = min(min_length, end - start + 1)
                    break

        return min_length if min_length != float('inf') else -1

'''
Approach:
1. **Iterate Through Start Indices:**
   - Use a nested loop where the outer loop iterates through each starting index `start`.

2. **Calculate OR Value for Each Subarray:**
   - Use an inner loop to calculate the bitwise OR of the subarray from `start` to `end`.
   - If the OR value reaches or exceeds `k`, calculate the length of the subarray and update `min_length`.

3. **Return Result:**
   - If a valid subarray is found, return `min_length`.
   - Otherwise, return `-1` if no subarray meets the condition.

Time Complexity:
- O(n^2), where `n` is the length of the array, due to the nested loops.

Space Complexity:
- O(1), as no additional data structures are used.
'''

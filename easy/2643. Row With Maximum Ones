class Solution:
    def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:
        max_count = -1
        row_index = -1
        
        for i, row in enumerate(mat):
            count_ones = row.count(1)
            
            if count_ones > max_count:
                max_count = count_ones
                row_index = i
        
        return [row_index, max_count]

'''
Approach:
1. Initialize `max_count` to -1 and `row_index` to -1.
2. Iterate over each row of the matrix:
   - Count the number of 1's in the row.
   - If this count is greater than `max_count`, update both `max_count` and `row_index`.
3. At the end of the loop, return the `row_index` and `max_count`.

Time Complexity: O(m * n)
- We traverse each row and count 1's which takes O(n) per row, so O(m * n) in total.

Space Complexity: O(1)
- We only use constant extra space for variables.

'''

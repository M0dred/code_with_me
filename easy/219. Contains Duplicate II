from typing import List

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        num_map = {}  # Hash map to store the last seen index of each number

        for i, num in enumerate(nums):
            if num in num_map and i - num_map[num] <= k:
                return True
            num_map[num] = i  # Update the last seen index of the current number

        return False

'''
Approach:
1. The problem requires checking if there exist two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.
2. We use a hash map `num_map` to keep track of the last seen index of each number.
3. We iterate through the array, and for each number, we check if it has been seen before and if the difference between the current index and the last seen index is less than or equal to `k`.
4. If both conditions are met, we return `True`.
5. Otherwise, we update the last seen index of the current number in the hash map.
6. If we finish iterating through the array without finding such a pair, we return `False`.

Time Complexity: O(n), where n is the length of the input array.
- We iterate through the array once, and each operation inside the loop is constant time on average due to the hash map.

Space Complexity: O(min(n, k))
- The hash map can store at most `min(n, k)` elements because we only need to keep track of the last `k` elements to satisfy the condition.
'''

from itertools import combinations

class Solution:
    def largestTriangleArea(self, points: List[List[int]]) -> float:
        max_area = 0.0
        for p1, p2, p3 in combinations(points, 3):
            x1, y1 = p1
            x2, y2 = p2
            x3, y3 = p3
            area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0
            if area > max_area:
                max_area = area
        return max_area

'''
Approach:
- Use itertools.combinations to generate all possible triplets of points from the input list.
- For each triplet (p1, p2, p3) with coordinates (x1,y1), (x2,y2), (x3,y3), compute the area using the shoelace formula: (1/2) * |x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)|.
- Track the maximum area encountered across all triplets.
- Return the maximum area as a float.
- Time Complexity: O(n^3) where n is the number of points (n <= 50), as we generate C(n,3) triplets and compute area in O(1) time for each.
- Space Complexity: O(1) excluding input storage, as we only use a few variables and combinations generates triplets on-the-fly.
'''

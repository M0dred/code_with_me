from typing import List

class Solution:
    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:
        """
        Returns the repeated number and the missing number from the grid.
        """
        n = len(grid)
        num_count = {}
        repeated, missing = -1, -1

        # Step 1: Count occurrences of each number
        for row in grid:
            for num in row:
                num_count[num] = num_count.get(num, 0) + 1

        # Step 2: Identify the repeated and missing numbers
        for num in range(1, n * n + 1):
            count = num_count.get(num, 0)
            if count == 2:
                repeated = num
            elif count == 0:
                missing = num

        return [repeated, missing]

# Example Usage:
# obj = Solution()
# result = obj.findMissingAndRepeatedValues([[1,3],[2,2]])  # Output: [2,4]
# print(result)

'''
Approach:
1. Use a dictionary `num_count` to store the occurrence of each number in the grid.
2. Iterate over all numbers from `1` to `n^2`:
   - If a number appears twice, it is the repeated number.
   - If a number is missing from the dictionary, it is the missing number.

Time Complexity: O(n^2)
- We iterate through all grid elements (O(n^2)).
- Then iterate through numbers from `1` to `n^2` (O(n^2)).

Space Complexity: O(n^2)
- Dictionary `num_count` stores occurrences for `n^2` numbers.
'''

class Solution:
    def getLongestSubsequence(self, words: List[str], groups: List[int]) -> List[str]:
        n = len(words)
        
        # Handle edge case: if n=1, return the single word
        if n == 1:
            return [words[0]]
        
        # dp[i][g] = length of longest alternating subsequence ending at index i with group g (0 or 1)
        dp = [[0] * 2 for _ in range(n)]
        # prev[i][g] = previous index in the subsequence ending at i with group g
        prev = [[-1] * 2 for _ in range(n)]
        
        # Initialize base cases for first element
        dp[0][groups[0]] = 1
        # Mark first element as included if used
        prev[0][groups[0]] = 0
        
        # Fill DP table
        for i in range(1, n):
            # Copy previous state
            dp[i][0] = dp[i-1][0]
            dp[i][1] = dp[i-1][1]
            prev[i][0] = prev[i-1][0]
            prev[i][1] = prev[i-1][1]
            
            # Current group value
            g = groups[i]
            # Opposite group value
            opp_g = 1 - g
            
            # Check if including i extends subsequence
            if dp[i-1][opp_g] + 1 > dp[i][g]:
                dp[i][g] = dp[i-1][opp_g] + 1
                prev[i][g] = i  # Mark i as included
            # Maintain max length for opposite group
            if dp[i-1][opp_g] > dp[i][opp_g]:
                dp[i][opp_g] = dp[i-1][opp_g]
                prev[i][opp_g] = prev[i-1][opp_g]
        
        # Find the end of the longest subsequence
        max_len = max(dp[n-1][0], dp[n-1][1])
        end_group = 0 if dp[n-1][0] > dp[n-1][1] else 1
        end_index = n - 1
        
        # Find the last included index
        while end_index >= 0 and prev[end_index][end_group] == -1:
            end_index -= 1
        if end_index < 0:
            end_index = 0  # Fallback to first element if no sequence found (shouldn't happen)
        
        # Reconstruct the subsequence
        result = []
        i = end_index
        g = end_group
        while i >= 0:
            if prev[i][g] == i:
                result.append(words[i])
                g = 1 - g  # Switch to opposite group
            i -= 1
        
        # Reverse to get correct order
        return result[::-1]

'''
Approach:
1. Handle edge case: if n=1, return [words[0]] as the subsequence.
2. Use dynamic programming to find the longest alternating subsequence:
   - dp[i][g] = length of longest alternating subsequence ending at index i with group g (0 or 1).
   - prev[i][g] = index of the last included element in the subsequence ending at i with group g.
3. Initialize base case:
   - dp[0][groups[0]] = 1 (sequence with first element).
   - prev[0][groups[0]] = 0 (mark first element as included).
4. For each index i from 1 to n-1:
   - Inherit max lengths from previous index (dp[i-1]).
   - For current group g = groups[i], try including i: new length = 1 + dp[i-1][1-g].
   - Update dp[i][g] and prev[i][g] if including i gives a longer sequence.
   - Maintain max length for the opposite group.
5. Find the maximum length at dp[n-1][0] or dp[n-1][1] and the corresponding group.
6. Reconstruct the subsequence:
   - Start from the last index with the max-length group.
   - Backtrack using prev to include indices where prev[i][g] == i.
   - Collect corresponding words and reverse for correct order.
Time Complexity: O(n) - single pass to fill DP table and reconstruct subsequence.
Space Complexity: O(n) - for dp and prev arrays of size n*2.
'''

class Solution:
    def countPrefixSuffixPairs(self, words: List[str]) -> int:
        def isPrefixAndSuffix(str1: str, str2: str) -> bool:
            # Check if str1 is both a prefix and a suffix of str2
            return str2.startswith(str1) and str2.endswith(str1)

        count = 0
        n = len(words)

        # Iterate through all pairs (i, j) with i < j
        for i in range(n):
            for j in range(i + 1, n):
                if isPrefixAndSuffix(words[i], words[j]):
                    count += 1

        return count

'''
Approach:
1. Define a helper function `isPrefixAndSuffix`:
   - Checks if a string `str1` is both a prefix and suffix of `str2` using `startswith` and `endswith` methods.
2. Use nested loops to iterate over all pairs `(i, j)` where `i < j`.
3. For each pair, check if `words[i]` is both a prefix and suffix of `words[j]`.
4. If true, increment the counter.
5. Return the counter as the final result.

Time Complexity:
- O(n^2 * m), where n is the length of `words` and m is the average length of strings in `words`.

Space Complexity:
- O(1), as no additional data structures are used apart from counters.
'''

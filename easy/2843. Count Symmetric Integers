class Solution:
    def countSymmetricIntegers(self, low: int, high: int) -> int:
        count = 0
        
        # Iterate through all numbers in range
        for num in range(low, high + 1):
            # Convert to string for easier digit access
            num_str = str(num)
            length = len(num_str)
            
            # Only consider even-length numbers
            if length % 2 == 0:
                n = length // 2
                # Calculate sum of first n digits
                first_half_sum = sum(int(d) for d in num_str[:n])
                # Calculate sum of last n digits
                second_half_sum = sum(int(d) for d in num_str[n:])
                
                # If sums are equal, it's symmetric
                if first_half_sum == second_half_sum:
                    count += 1
                    
        return count

'''
Approach:
1. Iterate through each number in range [low, high]
2. For each number:
   - Convert to string to process digits
   - Check if length is even (odd lengths can't be symmetric)
   - If even, split into first n and last n digits
   - Calculate sum of each half
   - If sums are equal, increment counter
3. Return total count
Time Complexity: O((high-low) * log(high)) - iterating through range and processing digits
Space Complexity: O(log(high)) - for string conversion
'''

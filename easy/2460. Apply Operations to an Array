from typing import List

class Solution:
    def applyOperations(self, nums: List[int]) -> List[int]:
        """
        Applies the given operations on the array and returns the resulting array.
        """
        n = len(nums)

        # Step 1: Apply the operations
        for i in range(n - 1):
            if nums[i] == nums[i + 1] and nums[i] != 0:
                nums[i] *= 2
                nums[i + 1] = 0

        # Step 2: Shift non-zero elements to the left
        result = [num for num in nums if num != 0]  # Collect non-zero numbers
        result.extend([0] * (n - len(result)))  # Append zeros at the end

        return result

# Example Usage:
# obj = Solution()
# result = obj.applyOperations([1,2,2,1,1,0])  # Output: [1,4,2,0,0,0]
# print(result)

'''
Approach:
1. Iterate through the array and apply the operations:
   - If nums[i] == nums[i+1] (and not zero), double nums[i] and set nums[i+1] to zero.
2. Move all non-zero elements to the front and push zeros to the end.

Time Complexity: O(n)
- The operations step takes O(n).
- The shifting step takes O(n).

Space Complexity: O(n)
- We use an extra list to store non-zero elements and zeros.
'''

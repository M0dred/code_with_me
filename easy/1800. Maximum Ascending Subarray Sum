class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        max_sum = current_sum = nums[0]
        
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]:
                current_sum += nums[i]
            else:
                current_sum = nums[i]
            
            max_sum = max(max_sum, current_sum)
        
        return max_sum

'''
Approach:
1. The problem requires finding the maximum sum of an ascending subarray in the given array.
2. We initialize `current_sum` and `max_sum` with the first element of the array.
3. We iterate through the array starting from the second element.
4. If the current element is greater than the previous element, we add it to `current_sum`.
5. If the current element is not greater than the previous element, we reset `current_sum` to the current element.
6. We update `max_sum` whenever `current_sum` is greater than `max_sum`.
7. The final result is the maximum sum encountered, which is stored in `max_sum`.

Time Complexity: O(n), where n is the length of the array.
- We iterate through the array once, performing constant-time operations for each element.

Space Complexity: O(1)
- We use a constant amount of extra space to store `current_sum` and `max_sum`.
'''

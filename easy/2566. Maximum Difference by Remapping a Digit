class Solution:
    def minMaxDifference(self, num: int) -> int:
        # Convert num to string for digit manipulation
        s = str(num)
        
        # Find maximum value
        max_num = num
        for d in s:
            # Try remapping each digit to 9
            if d != '9':
                max_num = int(s.replace(d, '9'))
                break
        
        # Find minimum value
        min_num = num
        for d in s:
            # Try remapping each digit to 0
            if d != '0':
                min_num = int(s.replace(d, '0'))
                break
        
        return max_num - min_num

'''
Approach:
1. Convert num to a string s for easier digit manipulation.
2. To find max_num:
   - Iterate through digits in s.
   - For the first digit d that is not '9', replace all occurrences of d with '9' to maximize the number.
   - Convert the resulting string to an integer.
   - If no such digit is found, max_num remains num.
3. To find min_num:
   - Iterate through digits in s.
   - For the first digit d that is not '0', replace all occurrences of d with '0' to minimize the number.
   - Convert the resulting string to an integer.
   - If no such digit is found, min_num remains num.
4. Return the difference max_num - min_num.

Time Complexity: O(l), where l is the number of digits in num (up to 9 for num <= 10^8). String conversion and replacement are O(l), and we perform one pass for max and min.
Space Complexity: O(l) for the string s and temporary strings created during replacement.
'''

class Solution:
    def findLucky(self, arr: List[int]) -> int:
        # Initialize frequency array (size 501 since arr[i] <= 500)
        freq = [0] * 501
        # Count frequency of each number
        for num in arr:
            freq[num] += 1
        
        # Find lucky numbers where frequency equals value
        max_lucky = -1
        for num in range(1, 501):
            if num == freq[num]:
                max_lucky = max(max_lucky, num)
        
        # Return largest lucky number or -1 if none found
        return max_lucky

'''
Approach:
1. Create a frequency array of size 501 to count occurrences of each number (1 to 500).
2. Iterate through arr to populate the frequency array.
3. Iterate through numbers 1 to 500 to find lucky numbers (where num == freq[num]).
4. Track the maximum lucky number found.
5. Return the maximum lucky number, or -1 if no lucky number exists.

Time Complexity: O(n + m), where n is the length of arr (n <= 500) and m is the range of values (m = 500). Frequency counting takes O(n), and checking for lucky numbers takes O(m).

Space Complexity: O(m) for the frequency array of size 501.
'''

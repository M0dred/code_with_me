class Solution:
    def countKeyChanges(self, s: str) -> int:
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0

        key_changes = 0
        prev_key = s[0].lower()

        # Iterate through the string
        for i in range(1, len(s)):
            current_key = s[i].lower()
            if current_key != prev_key:
                key_changes += 1
                prev_key = current_key

        return key_changes

'''
Approach:
1. Treat both uppercase and lowercase letters as the same key (convert all characters to lowercase).
2. Initialize `key_changes` to 0 and track the previous key using `prev_key`.
3. Iterate through the string starting from the second character:
   - Compare the lowercase version of the current character with `prev_key`.
   - If they differ, increment `key_changes` and update `prev_key`.
4. Return the total number of key changes.

Time Complexity:
- O(n), where n is the length of the string `s`.

Space Complexity:
- O(1), as no additional data structures are used apart from counters.
'''

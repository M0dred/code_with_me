class Solution:
    def longestMonotonicSubarray(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 1
        
        max_length = 1
        increasing_length = 1
        decreasing_length = 1
        
        for i in range(1, n):
            # Check for increasing subarray
            if nums[i] > nums[i-1]:
                increasing_length += 1
                decreasing_length = 1
            # Check for decreasing subarray
            elif nums[i] < nums[i-1]:
                decreasing_length += 1
                increasing_length = 1
            # If nums[i] == nums[i-1], reset both lengths
            else:
                increasing_length = 1
                decreasing_length = 1
            
            max_length = max(max_length, increasing_length, decreasing_length)
        
        return max_length

'''
Approach:
1. The problem requires finding the length of the longest subarray that is either strictly increasing or strictly decreasing.
2. We iterate through the array, keeping track of the current lengths of increasing and decreasing subarrays.
3. If the current element is greater than the previous one, we increment the increasing length and reset the decreasing length.
4. If the current element is less than the previous one, we increment the decreasing length and reset the increasing length.
5. If the current element is equal to the previous one, we reset both lengths.
6. We keep track of the maximum length seen so far and return it at the end.

Time Complexity: O(n), where n is the length of the array.
- We iterate through the array once, performing constant-time operations for each element.

Space Complexity: O(1)
- We use a constant amount of extra space to store the lengths and the maximum length.
'''

class Solution:
    def possibleStringCount(self, word: str) -> int:
        # Initialize result with 1 for the original string
        result = 1
        # Initialize run length and current character
        run_length = 1
        current_char = word[0]
        
        # Iterate through word starting from second character
        for i in range(1, len(word)):
            # If current character matches previous, increment run length
            if word[i] == current_char:
                run_length += 1
            else:
                # End of run: if length >= 2, add length-1 to result
                if run_length >= 2:
                    result += run_length - 1
                # Start new run with current character
                current_char = word[i]
                run_length = 1
        
        # Check final run
        if run_length >= 2:
            result += run_length - 1
        
        # Return total count of possible strings
        return result

'''
Approach:
1. Initialize result as 1 to account for the original string (no mistake).
2. Track runs of consecutive identical characters using run_length and current_char.
3. Iterate through word from index 1:
   - If current character matches current_char, increment run_length.
   - If different, end the run:
     - If run_length >= 2, add run_length - 1 to result (possible reductions).
     - Start new run with current character, reset run_length to 1.
4. After loop, check the final run and add run_length - 1 if run_length >= 2.
5. Return the total count, which is 1 (original string) plus sum of run_length - 1 for each run with length >= 2.

Time Complexity: O(n), where n is the length of word. We iterate through the string once.

Space Complexity: O(1), using only constant extra space for variables.
'''

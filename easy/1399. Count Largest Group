class Solution:
    def countLargestGroup(self, n: int) -> int:
        from collections import defaultdict

        def digit_sum(x):
            total = 0
            while x:
                total += x % 10
                x //= 10
            return total

        groups = defaultdict(int)

        for num in range(1, n + 1):
            s = digit_sum(num)
            groups[s] += 1

        max_size = max(groups.values())
        return sum(1 for size in groups.values() if size == max_size)

'''
Approach:
1. Iterate over all numbers from 1 to n.
2. For each number, calculate the sum of its digits using a helper function `digit_sum`.
3. Use a dictionary to count how many numbers fall into each digit sum group.
4. Find the maximum group size by taking the max value from the dictionary.
5. Count how many groups have this maximum size and return the count.

Time Complexity: O(n * d), where d is the number of digits in n (at most log10(n)).
Space Complexity: O(n), for storing group counts in the dictionary.
'''

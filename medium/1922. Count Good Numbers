class Solution:
    def countGoodNumbers(self, n: int) -> int:
        MOD = 10**9 + 7
        
        # Even indices can have even digits: 0, 2, 4, 6, 8 (5 choices)
        # Odd indices can have prime digits: 2, 3, 5, 7 (4 choices)
        even_choices = 5
        prime_choices = 4
        
        # Number of even and odd positions
        # For n=4: indices 0,2 (even), 1,3 (odd) -> 2 each
        # For n=5: indices 0,2,4 (even), 1,3 (odd) -> 3 even, 2 odd
        even_count = (n + 1) // 2  # Ceiling of n/2
        odd_count = n // 2         # Floor of n/2
        
        # Function for modular exponentiation
        def pow_mod(base, exp, mod):
            result = 1
            base %= mod
            while exp > 0:
                if exp & 1:  # If exp is odd
                    result = (result * base) % mod
                base = (base * base) % mod
                exp >>= 1
            return result
        
        # Total = (even_choices)^even_count * (prime_choices)^odd_count
        even_part = pow_mod(even_choices, even_count, MOD)
        odd_part = pow_mod(prime_choices, odd_count, MOD)
        
        # Combine results modulo MOD
        return (even_part * odd_part) % MOD

'''
Approach:
1. Identify choices:
   - Even indices: 5 even digits (0,2,4,6,8)
   - Odd indices: 4 prime digits (2,3,5,7)
2. Count positions:
   - Even positions: ceil(n/2) = (n+1)//2
   - Odd positions: floor(n/2) = n//2
3. Calculate total:
   - For even positions: 5^(even_count)
   - For odd positions: 4^(odd_count)
   - Total = 5^(even_count) * 4^(odd_count)
4. Use modular exponentiation to handle large powers efficiently
5. Return result modulo 10^9 + 7
Time Complexity: O(log n) - due to modular exponentiation
Space Complexity: O(1) - constant space used
'''

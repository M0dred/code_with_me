from typing import List

class Bank:

    def __init__(self, balance: List[int]):
        # Store balances in 0-indexed list; accounts are 1..n externally
        self.bal = balance
        self.n = len(balance)

    def _valid(self, acct: int) -> bool:
        return 1 <= acct <= self.n

    def transfer(self, account1: int, account2: int, money: int) -> bool:
        if not self._valid(account1) or not self._valid(account2):
            return False
        i, j = account1 - 1, account2 - 1
        if self.bal[i] < money:
            return False
        self.bal[i] -= money
        self.bal[j] += money
        return True

    def deposit(self, account: int, money: int) -> bool:
        if not self._valid(account):
            return False
        i = account - 1
        self.bal[i] += money
        return True

    def withdraw(self, account: int, money: int) -> bool:
        if not self._valid(account):
            return False
        i = account - 1
        if self.bal[i] < money:
            return False
        self.bal[i] -= money
        return True

'''
Approach:
- Keep balances in a 0-indexed array; external account numbers are 1..n.
- Validate account indices for every operation.
- transfer: check both accounts valid and source has enough funds; then move money.
- deposit: check account valid; add money.
- withdraw: check account valid and sufficient funds; subtract money.

Time Complexity: O(1) per operation.  
Space Complexity: O(n) for the balances array.
'''

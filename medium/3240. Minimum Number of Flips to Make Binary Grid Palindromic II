from typing import List

class Solution:
    def minFlips(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])  # Dimensions of the grid
        ans = 0  # Initialize the total flips count

        # Step 1: Process the 2x2 blocks in the grid
        for i in range(m // 2):
            for j in range(n // 2):
                # Count the number of 1's in the current 2x2 block
                cnt1 = grid[i][j] + grid[i][n - 1 - j] + \
                       grid[m - 1 - i][j] + grid[m - 1 - i][n - 1 - j]
                # Add the minimum flips required to make the block palindromic
                ans += min(cnt1, 4 - cnt1)

        # Step 2: Handle the middle row if the number of rows is odd
        diff, cnt1 = 0, 0  # Initialize difference and count of 1's
        if m % 2 == 1:
            for j in range(n // 2):
                # Check if the current cell pair is different
                if grid[m // 2][j] ^ grid[m // 2][n - 1 - j]:  # XOR to check mismatch
                    diff += 1  # Increment the difference counter
                else:
                    # If the pair is already matching, count the number of 1's
                    cnt1 += grid[m // 2][j] * 2  # Multiply by 2 because the pair is symmetric

        # Step 3: Handle the middle column if the number of columns is odd
        if n % 2 == 1:
            for i in range(m // 2):
                # Check if the current cell pair is different
                if grid[i][n // 2] ^ grid[m - 1 - i][n // 2]:  # XOR to check mismatch
                    diff += 1  # Increment the difference counter
                else:
                    # If the pair is already matching, count the number of 1's
                    cnt1 += grid[i][n // 2] * 2  # Multiply by 2 because the pair is symmetric

        # Step 4: Handle the center cell if both rows and columns are odd
        if m % 2 == 1 and n % 2 == 1:
            ans += grid[m // 2][n // 2]  # Add the value of the center cell directly

        # Step 5: Adjust the total flips count based on differences
        if diff > 0:
            ans += diff  # Add the mismatched pairs to the flips count
        else:
            ans += cnt1 % 4  # If no mismatches, adjust based on the modulo of total 1's

        return ans

class Solution:
    def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:
        def dfs(head: Optional[ListNode], node: Optional[TreeNode]) -> bool:
            # Base case: if the linked list is completely matched
            if not head:
                return True
            # Base case: if the binary tree node is None
            if not node:
                return False
            # Check if current values match and recurse to children
            if head.val == node.val:
                return dfs(head.next, node.left) or dfs(head.next, node.right)
            return False

        def traverse(node: Optional[TreeNode]) -> bool:
            # Base case: if the tree node is None
            if not node:
                return False
            # Check if the current tree node starts a valid path
            return dfs(head, node) or traverse(node.left) or traverse(node.right)

        return traverse(root)

'''
Approach:
1. Define a helper function `dfs` to check if the linked list matches a downward path starting from a given tree node.
   - If the linked list is fully traversed (`head is None`), return `True`.
   - If the current tree node is `None`, return `False`.
   - If the current linked list node value matches the current tree node value, recursively check the left and right children with the next node in the linked list.
   - If the values do not match, return `False`.
2. Define a traversal function `traverse` to explore all potential starting points in the binary tree.
   - If the tree node is `None`, return `False`.
   - Use `dfs` to check for a match starting from the current tree node.
   - Recursively check the left and right subtrees.
3. Start traversal from the root of the binary tree.

Time Complexity:
- The `dfs` function checks a potential path of length `k` (length of the linked list) at each tree node. In the worst case, it is called for every node in the tree.
- Let `n` be the number of nodes in the tree and `k` be the length of the linked list.
- Total complexity: O(n * k).

Space Complexity:
- Recursive call stack can go up to `O(k)` for the depth of the linked list during `dfs`.
- Space complexity: O(k).
'''

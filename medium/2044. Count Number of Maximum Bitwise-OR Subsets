class Solution:
    def countMaxOrSubsets(self, nums: List[int]) -> int:
        n = len(nums)
        max_or = 0
        # Step 1: Compute maximum bitwise OR of all elements
        for num in nums:
            max_or |= num
        
        count = 0
        # Step 2: Iterate over all non-empty subsets using bitmask
        for mask in range(1, 1 << n):  # From 1 to 2^n - 1 for non-empty subsets
            or_val = 0
            # Compute OR of elements in current subset
            for i in range(n):
                if mask & (1 << i):  # If i-th bit is set, include nums[i]
                    or_val |= nums[i]
            # If subset's OR equals max_or, increment count
            if or_val == max_or:
                count += 1
        
        return count

'''
Approach:
The solution finds the number of non-empty subsets of `nums` that produce the maximum bitwise OR:
1. Compute the maximum bitwise OR (`max_or`) by OR-ing all elements in `nums`, as including more elements can only increase or maintain the OR value.
2. Use a bitmask to generate all non-empty subsets (from 1 to 2^n - 1):
   - For each mask, check which bits are set (indicating included elements).
   - Compute the bitwise OR of the elements in the subset.
   - If the subset's OR equals `max_or`, increment a counter.
3. Return the count of subsets that achieve `max_or`.
4. The approach ensures distinct subsets are counted based on different index combinations, as each bitmask corresponds to a unique subset of indices.

Time Complexity:
- Computing `max_or` takes O(n), where n is the length of nums.
- Iterating over all subsets takes O(2^n) (since n <= 16, 2^16 = 65,536 is feasible).
- For each subset, computing the OR takes O(n).
- Total time complexity: O(n * 2^n).

Space Complexity:
- Variables (`max_or`, `count`, `or_val`, etc.) use O(1) space.
- No additional data structures are used beyond the input array.
- Total space complexity: O(1).
'''

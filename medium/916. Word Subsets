class Solution:
    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:
        from collections import Counter

        # Function to calculate the maximum frequency of each letter across all words in words2
        def max_frequency(words):
            max_count = Counter()
            for word in words:
                word_count = Counter(word)
                for char in word_count:
                    max_count[char] = max(max_count[char], word_count[char])
            return max_count

        # Calculate the maximum frequency required for each character from words2
        required_count = max_frequency(words2)

        # Filter words in words1 that satisfy the universal condition
        result = []
        for word in words1:
            word_count = Counter(word)
            if all(word_count[char] >= required_count[char] for char in required_count):
                result.append(word)

        return result

'''
Approach:
1. **Maximum Frequency Calculation for words2:**
   - Use a `Counter` to calculate the maximum frequency of each character required across all strings in `words2`.
   - For example, if `words2 = ["e", "o"]`, the required frequency is `{e: 1, o: 1}`.

2. **Filter words1:**
   - For each word in `words1`, calculate its character frequencies using `Counter`.
   - Check if it satisfies the universal condition: all characters in the `required_count` must have at least the required frequency in the current word.

3. **Collect Results:**
   - Append words from `words1` that meet the universal condition to the result list.

4. **Return the Result:**
   - Return the list of universal strings.

Time Complexity:
- O(n * m + k * l), where:
  - `n` is the length of `words1`, `m` is the average length of strings in `words1`.
  - `k` is the length of `words2`, `l` is the average length of strings in `words2`.

Space Complexity:
- O(26) = O(1), for storing character frequencies.
'''

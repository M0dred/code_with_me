class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])

        # If the starting cell is an obstacle, there are no paths.
        if obstacleGrid[0][0] == 1:
            return 0

        # Initialize a DP table with the same dimensions as obstacleGrid
        dp = [[0] * n for _ in range(m)]

        # Base case: Starting cell has 1 path if not obstacle
        dp[0][0] = 1

        # Fill the first row
        for j in range(1, n):
            if obstacleGrid[0][j] == 0:
                dp[0][j] = dp[0][j - 1]
            else:
                dp[0][j] = 0  # Obstacle encountered, no path through it

        # Fill the first column
        for i in range(1, m):
            if obstacleGrid[i][0] == 0:
                dp[i][0] = dp[i - 1][0]
            else:
                dp[i][0] = 0  # Obstacle encountered, no path through it

        # Fill in the rest of the dp table
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 0:
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
                else:
                    dp[i][j] = 0  # Obstacle encountered, no path through it

        return dp[m - 1][n - 1]

'''
Approach:
1. The problem requires finding the number of unique paths from the top-left corner to the bottom-right corner in a grid with obstacles.
2. We use dynamic programming to solve this problem. Let `dp[i][j]` be the number of unique paths to reach cell `(i, j)`.
3. Base Cases:
   - If the starting cell `obstacleGrid[0][0]` is an obstacle, return 0.
   - Otherwise, initialize `dp[0][0] = 1`.
4. Recurrence Relation:
   - For any other cell `(i, j)`:
     - If `obstacleGrid[i][j]` is an obstacle, `dp[i][j] = 0`.
     - Otherwise, `dp[i][j] = dp[i-1][j] + dp[i][j-1]`.
5. Boundary Conditions:
   - For the first row (i=0), `dp[0][j] = dp[0][j-1]` if no obstacle, else 0.
   - For the first column (j=0), `dp[i][0] = dp[i-1][0]` if no obstacle, else 0.
6. Return `dp[m-1][n-1]`.

Time Complexity: O(m*n), where m and n are the dimensions of the grid.
- We iterate through each cell of the grid once to fill the DP table.

Space Complexity: O(m*n)
- We use a DP table of the same size as the input grid.
'''

class ATM(object):

    def __init__(self):
        # Initialize the ATM with an empty count of banknotes for each denomination
        self.banknotes = [0] * 5  # [$20, $50, $100, $200, $500]
        self.denominations = [20, 50, 100, 200, 500]  # Banknote values

    def deposit(self, banknotesCount):
        """
        :type banknotesCount: List[int]
        :rtype: None
        """
        # Add the deposited banknotes to the current count
        for i in range(5):
            self.banknotes[i] += banknotesCount[i]

    def withdraw(self, amount):
        """
        :type amount: int
        :rtype: List[int]
        """
        withdraw_count = [0] * 5  # To store the count of banknotes to withdraw

        # Try to withdraw using larger denominations first
        for i in range(4, -1, -1):
            if amount <= 0:
                break
            # Determine the number of banknotes to use for the current denomination
            use = min(amount // self.denominations[i], self.banknotes[i])
            withdraw_count[i] = use
            amount -= use * self.denominations[i]

        # If the amount is not fully satisfied, rollback and return [-1]
        if amount > 0:
            return [-1]

        # Otherwise, update the banknotes in the ATM and return the result
        for i in range(5):
            self.banknotes[i] -= withdraw_count[i]

        return withdraw_count

'''
Approach:
1. **Deposit Function:**
   - Add the input `banknotesCount` to the ATM's current banknotes count.
   - Time Complexity: O(1).

2. **Withdraw Function:**
   - Use a greedy approach to prioritize larger denominations:
     - Iterate from the largest denomination to the smallest.
     - Calculate how many banknotes of the current denomination can be used without exceeding the amount or available count.
     - Deduct the value of the used banknotes from the amount.
   - If the amount is fully satisfied, update the ATM's banknotes count and return the counts used for withdrawal.
   - If the amount cannot be satisfied, return `[-1]` without updating the ATM.
   - Time Complexity: O(1).

3. **Space Complexity:**
   - O(1), as only a fixed-size list is maintained for denominations and counts.
'''

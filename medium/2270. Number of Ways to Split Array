class Solution:
    def waysToSplitArray(self, nums: List[int]) -> int:
        # Compute the total sum of the array
        total_sum = sum(nums)
        left_sum = 0
        valid_splits = 0

        # Iterate through the array
        for i in range(len(nums) - 1):
            left_sum += nums[i]  # Update the sum of the left part
            right_sum = total_sum - left_sum  # Compute the sum of the right part

            # Check if the split is valid
            if left_sum >= right_sum:
                valid_splits += 1

        return valid_splits

'''
Approach:
1. **Calculate Total Sum:**
   - Compute the total sum of the array `nums`.

2. **Iterate Through the Array:**
   - Use a `for` loop to iterate over indices `i` from `0` to `len(nums) - 2`.
   - Update the left part sum `left_sum` incrementally by adding `nums[i]`.
   - Compute the right part sum as `total_sum - left_sum`.

3. **Validate Split:**
   - Check if the condition `left_sum >= right_sum` is satisfied.
   - If true, increment the `valid_splits` counter.

4. **Return Result:**
   - After the loop, return the total count of valid splits.

Time Complexity:
- O(n), where `n` is the length of `nums`, as we iterate through the array once.

Space Complexity:
- O(1), as only a few variables are used for computation.
'''

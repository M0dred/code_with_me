from functools import cache
from typing import List

class Solution:
    def minimumCoins(self, prices: List[int]) -> int:
        n = len(prices)
        
        @cache  # Memoization to avoid redundant calculations
        def dfs(i: int) -> int:
            if i * 2 >= n:
                return prices[i - 1]  # i starts from 1
            # Consider all possible next steps within the reward range
            return min(dfs(j) for j in range(i + 1, i * 2 + 2)) + prices[i - 1]
        
        return dfs(1)

'''
Approach:
1. The problem requires determining the minimum number of coins needed to acquire all fruits, considering the reward system.
2. We use a recursive function with memoization to compute the minimum cost for each fruit.
3. For each fruit `i`, we consider purchasing it and then recursively compute the minimum cost for the next `i` fruits.
4. The base case is when `i * 2 >= n`, meaning we are at the end of the list, and we simply return the price of the current fruit.
5. We use memoization to avoid redundant calculations and improve efficiency.

Time Complexity: O(n^2)
- In the worst case, each fruit can lead to O(n) recursive calls, resulting in O(n^2) time complexity.

Space Complexity: O(n)
- We use memoization to store the results of DFS calls, which requires O(n) space.
- The recursion stack can grow up to O(n) in the worst case.
'''

from collections import defaultdict, deque
from typing import List

class Solution:
    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:
        """
        Finds the maximum net income Alice can earn while moving towards the optimal leaf node.
        """
        # Step 1: Build the tree as an adjacency list
        tree = defaultdict(list)
        for u, v in edges:
            tree[u].append(v)
            tree[v].append(u)

        # Step 2: Find the path from Bob to root (0) and store distances
        bob_path = {}
        def dfs_bob(node, parent, depth):
            bob_path[node] = depth
            if node == 0:
                return True
            for neighbor in tree[node]:
                if neighbor != parent and dfs_bob(neighbor, node, depth + 1):
                    return True
            del bob_path[node]
            return False

        dfs_bob(bob, -1, 0)

        # Step 3: Run a DFS for Alice, maximizing her profit
        max_profit = float('-inf')

        def dfs_alice(node, parent, depth, total_income):
            nonlocal max_profit
            
            # Bob's distance from node
            bob_dist = bob_path.get(node, float('inf'))
            
            # Adjust the amount based on Alice and Bob's simultaneous arrival
            if depth < bob_dist:  # Alice reaches first, takes full amount
                total_income += amount[node]
            elif depth == bob_dist:  # Alice and Bob arrive together, split the amount
                total_income += amount[node] // 2
            # If Bob arrives first, the gate is already open, Alice gets nothing
            
            # Check if it's a leaf node (no other children except the parent)
            is_leaf = True
            for neighbor in tree[node]:
                if neighbor != parent:
                    is_leaf = False
                    dfs_alice(neighbor, node, depth + 1, total_income)
            
            if is_leaf:
                max_profit = max(max_profit, total_income)

        # Start DFS for Alice from node 0
        dfs_alice(0, -1, 0, 0)
        
        return max_profit

# Example Usage:
# obj = Solution()
# result = obj.mostProfitablePath(edges=[[0,1],[1,2],[1,3],[3,4]], bob=3, amount=[-2,4,2,-4,6])
# print(result)  # Output: 6

'''
Approach:
1. Build an adjacency list representation of the tree from the given edges.
2. Use DFS to find the path from Bob's starting node to the root (0) and store distances in `bob_path`.
3. Perform a DFS for Alice, keeping track of her income and determining whether Bob has already passed through a node.
4. If Alice and Bob reach a node simultaneously, Alice receives half the amount.
5. If Alice reaches first, she gets the full amount.
6. If Bob reaches first, Alice gets nothing at that node.
7. At each leaf node, update the maximum profit.
8. Return the maximum profit Alice can achieve.

Time Complexity: O(n)
- We perform two DFS traversals: one for Bob’s path and one for Alice's traversal.
- Each node and edge are processed once.

Space Complexity: O(n)
- We store the adjacency list, Bob’s path, and the recursion stack for DFS.
'''

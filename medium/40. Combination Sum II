class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        result = []
        
        def backtrack(start, path, remaining):
            if remaining == 0:
                result.append(path)
                return
            for i in range(start, len(candidates)):
                if i > start and candidates[i] == candidates[i-1]:
                    continue  # Skip duplicates
                if candidates[i] > remaining:
                    break  # Since candidates are sorted, no need to proceed further
                backtrack(i + 1, path + [candidates[i]], remaining - candidates[i])
        
        backtrack(0, [], target)
        return result

'''
Approach:
1. The problem requires finding all unique combinations of numbers from the given list that sum up to the target.
2. We sort the candidates to handle duplicates and make the backtracking process more efficient.
3. We use a backtracking approach to explore all possible combinations.
4. We skip over duplicate candidates to avoid duplicate combinations.
5. We recursively build combinations and backtrack when the sum exceeds the target.

Time Complexity: O(2^n)
- In the worst case, we explore all possible combinations of the candidates.

Space Complexity: O(n)
- The recursion stack can grow up to O(n) in the worst case.
'''

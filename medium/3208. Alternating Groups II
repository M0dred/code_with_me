from typing import List

class Solution:
    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:
        n = len(colors)
        ans = 0
        cnt = 1  # Start counting with 1 since we are checking pairs

        # Extend the array virtually by considering `2 * n` iterations for circularity
        for i in range(1, n * 2):
            # If the current and previous colors are the same, reset the counter
            if colors[i % n] == colors[(i - 1) % n]:
                cnt = 1
            else:
                cnt += 1  # Increment the counter for a valid alternating sequence

            # Check if we have a valid group
            if i >= n and cnt >= k:
                ans += 1

        return ans

'''
Reset Counter Correctly:
Reset cnt to 1 (not 0) whenever the colors are the same. This ensures that the next group starts correctly.

Count Alternating Groups Properly:
Increment cnt only when the current tile alternates with the previous one.

Ensure Circularity:
By iterating 2 * n times and using modulo arithmetic, the code simulates the circular nature of the array.

Validate Group Length:
Ensure the group length is at least 
k before counting it as a valid alternating group.
'''



from typing import List

class Solution:
    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:
        """
        Returns the number of alternating groups of size k in the circular colors array.
        """
        n = len(colors)
        count = 0

        # Extend colors to handle circular wrap-around
        extended_colors = colors + colors[:k - 1]

        # Count alternating pairs in the first window
        alternating_count = 0
        for i in range(k - 1):
            if extended_colors[i] != extended_colors[i + 1]:
                alternating_count += 1

        # If the first window is valid, count it
        if alternating_count == k - 1:
            count += 1

        # Slide the window across the array
        for i in range(1, n):
            # Remove leftmost pair from the count
            if extended_colors[i - 1] != extended_colors[i]:
                alternating_count -= 1

            # Add new rightmost pair to the count
            if extended_colors[i + k - 2] != extended_colors[i + k - 1]:
                alternating_count += 1

            # If the new window is valid, count it
            if alternating_count == k - 1:
                count += 1

        return count

# Example Usage:
# obj = Solution()
# result = obj.numberOfAlternatingGroups([0,1,0,1,0], 3)  # Output: 3
# print(result)

'''
Approach:
1. Extend the colors array by appending the first (k-1) elements to handle circular wrap-around.
2. Use a sliding window to track the number of alternating adjacent pairs.
3. Instead of checking all k elements, we dynamically update the alternating count.
4. If at any point alternating_count == k-1, count that segment.
5. Return the total number of valid segments.

Time Complexity: O(n)
- We iterate over colors only once, updating a counter dynamically.

Space Complexity: O(n)
- The extended array adds k-1 elements, making total space usage O(n).
'''


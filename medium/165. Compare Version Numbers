class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        # Split version strings into lists of revisions
        v1 = [int(x) for x in version1.split('.')]
        v2 = [int(x) for x in version2.split('.')]
        # Get maximum length for comparison
        max_len = max(len(v1), len(v2))
        
        # Compare revisions, padding with 0 for shorter versions
        for i in range(max_len):
            n1 = v1[i] if i < len(v1) else 0
            n2 = v2[i] if i < len(v2) else 0
            if n1 > n2:
                return 1
            elif n1 < n2:
                return -1
        return 0

'''
Approach:
- Split version1 and version2 by '.' to get lists of revision strings.
- Convert each revision string to an integer using int(), which ignores leading zeros (e.g., "001" becomes 1).
- Find the maximum length between the two revision lists to handle versions of different lengths.
- Iterate from index 0 to max_len-1, using 0 for missing revisions in shorter versions.
- For each index, compare revisions: return 1 if v1 > v2, -1 if v1 < v2, continue if equal.
- If all revisions are equal (including padded zeros), return 0.
- Time Complexity: O(m + n) where m and n are the lengths of version1 and version2, for splitting and iterating up to the maximum number of revisions.
- Space Complexity: O(m + n) for storing the revision lists v1 and v2.
'''

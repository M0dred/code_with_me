class Solution:
    def getWordsInLongestSubsequence(self, words: List[str], groups: List[int]) -> List[str]:
        n = len(words)
        
        # Handle edge case: if n=1, return the single word
        if n == 1:
            return [words[0]]
        
        # Function to compute Hamming distance between two strings
        def hamming_distance(s1: str, s2: str) -> int:
            if len(s1) != len(s2):
                return float('inf')  # Invalid if lengths differ
            return sum(c1 != c2 for c1, c2 in zip(s1, s2))
        
        # dp[i] = length of longest valid subsequence ending at index i
        dp = [1] * n
        # prev[i] = previous index in the subsequence ending at i
        prev = [-1] * n
        
        # Compute longest subsequence
        for i in range(1, n):
            for j in range(i):
                # Check conditions for including j and i in subsequence
                if (groups[j] != groups[i] and 
                    hamming_distance(words[j], words[i]) == 1):
                    if dp[j] + 1 > dp[i]:
                        dp[i] = dp[j] + 1
                        prev[i] = j
        
        # Find the index with the maximum subsequence length
        max_len = max(dp)
        end_index = dp.index(max_len)
        
        # Reconstruct the subsequence
        result = []
        while end_index != -1:
            result.append(words[end_index])
            end_index = prev[end_index]
        
        # Reverse to get correct order
        return result[::-1]

'''
Approach:
1. Handle edge case: if n=1, return [words[0]] as the subsequence.
2. Define a helper function to compute Hamming distance:
   - Return infinity if lengths differ (invalid pair).
   - Count positions where characters differ.
3. Use dynamic programming:
   - dp[i] = length of longest valid subsequence ending at index i.
   - prev[i] = previous index in the subsequence ending at i.
   - Initialize dp[i] = 1 (single element is a valid subsequence).
4. For each index i from 1 to n-1:
   - For each previous index j < i:
     - Check if groups[j] != groups[i] and Hamming distance between words[j] and words[i] is 1.
     - If valid, update dp[i] = max(dp[i], dp[j] + 1) and set prev[i] = j if better.
5. Find the index with maximum dp value (end of longest subsequence).
6. Reconstruct the subsequence:
   - Start from the end index, follow prev links, and collect words.
   - Reverse the result to get correct order.
Time Complexity: O(n^2 * m) - where n is length of words, m is max length of words[i] (for Hamming distance).
Space Complexity: O(n) - for dp and prev arrays.
'''

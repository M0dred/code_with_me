class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        if k == 0 or n >= k + maxPts:
            return 1.0
        
        # dp[i] represents the probability of having i points
        dp = [0.0] * (n + 1)
        dp[0] = 1.0  # Starting with 0 points has probability 1
        
        # Window sum to track probabilities of last maxPts states
        window_sum = 1.0  # Initially, only dp[0] contributes
        prob = 1.0 / maxPts  # Probability of drawing any number from 1 to maxPts
        
        for i in range(1, n + 1):
            # Probability of reaching i is the sum of probabilities of reaching (i-j) for j in [1, maxPts]
            dp[i] = window_sum * prob
            
            # Update window sum
            if i < k:
                window_sum += dp[i]  # Add current probability if i < k
            if i >= maxPts:
                window_sum -= dp[i - maxPts]  # Remove probability of state i - maxPts
        
        # Sum probabilities from k to n
        return sum(dp[k:n + 1])

"""
Approach:
1. If k == 0 (Alice stops immediately) or n >= k + maxPts (all possible final points are <= n), return 1.0.
2. Use dynamic programming where dp[i] is the probability of having exactly i points.
3. Initialize dp[0] = 1.0 (starting with 0 points).
4. For each point i from 1 to n:
   - Probability of reaching i is the sum of probabilities of being at i-j (for j from 1 to maxPts) times 1/maxPts.
   - Use a sliding window sum (window_sum) to track the sum of dp[i-maxPts] to dp[i-1] for efficiency.
   - If i < k, add dp[i] to window_sum (Alice can draw from state i).
   - If i >= maxPts, subtract dp[i-maxPts] from window_sum (remove state no longer in window).
5. The final probability is the sum of dp[i] for i from k to n (all stopping points <= n).

Time Complexity:
- O(n): We iterate from 1 to n to fill the dp array, with O(1) operations per iteration for updating window_sum.
- The final sum from k to n is O(n-k), which is at most O(n).

Space Complexity:
- O(n): The dp array has size n+1.
"""

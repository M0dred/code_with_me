class Solution:
    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        # Possible knight moves
        moves = [
            (-2, -1), (-1, -2), (1, -2), (2, -1),
            (2, 1), (1, 2), (-1, 2), (-2, 1)
        ]
        
        # Initialize DP arrays for current and previous steps
        prev_dp = [[0] * n for _ in range(n)]
        prev_dp[row][column] = 1  # Base case: 100% at the start position
        
        for step in range(1, k + 1):
            current_dp = [[0] * n for _ in range(n)]
            for r in range(n):
                for c in range(n):
                    if prev_dp[r][c] > 0:
                        for dr, dc in moves:
                            nr, nc = r + dr, c + dc
                            if 0 <= nr < n and 0 <= nc < n:
                                current_dp[nr][nc] += prev_dp[r][c] / 8
            prev_dp = current_dp  # Update for the next step
        
        # Sum probabilities for all positions after k moves
        return sum(sum(row) for row in prev_dp)

'''
Explanation

Moves Array:
Defines the 8 possible moves for the knight.

DP Initialization:
prev_dp starts with the knight's initial position having a probability of 1.

Update Probabilities:
For each step, calculate the probability of reaching each square on the board based on where the knight can move from the previous step.

Final Probability:
After k steps, sum up the probabilities of all positions on the board.
'''

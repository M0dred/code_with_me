class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # Initialize pointers:
        # low: everything before low is 0
        # mid: everything between low and mid is 1
        # high: everything after high is 2
        low = 0
        mid = 0
        high = len(nums) - 1
        
        # Process until mid pointer crosses high pointer
        while mid <= high:
            if nums[mid] == 0:
                # Swap with low to place 0 in correct position
                nums[low], nums[mid] = nums[mid], nums[low]
                low += 1
                mid += 1
            elif nums[mid] == 1:
                # 1 is in correct region, move to next element
                mid += 1
            else:  # nums[mid] == 2
                # Swap with high to place 2 in correct position
                nums[mid], nums[high] = nums[high], nums[mid]
                high -= 1
                # Don't increment mid, as swapped element needs checking

'''
Approach:
1. Use the Dutch National Flag algorithm with three pointers:
   - low: all elements before low are 0s.
   - mid: all elements between low and mid are 1s.
   - high: all elements after high are 2s.
2. Initialize low and mid at 0, high at len(nums) - 1.
3. While mid <= high:
   - If nums[mid] = 0: Swap with nums[low], increment both low and mid.
   - If nums[mid] = 1: No swap, increment mid (1 is in correct region).
   - If nums[mid] = 2: Swap with nums[high], decrement high (don't increment mid, as swapped element needs checking).
4. Modify array in-place, ensuring all 0s, then 1s, then 2s.
Time Complexity: O(n) - one pass through the array.
Space Complexity: O(1) - uses only a constant amount of extra space (pointers).
'''

from typing import List

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if not nums:
            return 0

        index = 1  # Position to place the next valid element
        count = 1   # Count occurrences of the current element

        for i in range(1, len(nums)):
            if nums[i] == nums[i - 1]:
                count += 1
            else:
                count = 1
            
            if count <= 2:
                nums[index] = nums[i]
                index += 1
        
        return index

'''
Approach:
1. **Two-Pointer Technique:**
   - Maintain an `index` pointer to track the position where the next valid element should be placed.
   - Use a `count` variable to track occurrences of the current number.

2. **Iterate Through the Array:**
   - If the current element is the same as the previous one, increment `count`.
   - If `count` is less than or equal to 2, move the element to `index` and increment `index`.

3. **Return the New Length:**
   - The value of `index` represents the number of valid elements after in-place modification.

Time Complexity:
- O(n), where `n` is the length of `nums`, as we traverse the array once.

Space Complexity:
- O(1), since no extra space is used apart from the input array.
'''

class Solution(object):
    def maxConsecutive(self, bottom, top, special):
        """
        :type bottom: int
        :type top: int
        :type special: List[int]
        :rtype: int
        """
        # Sort the special floors
        special.sort()

        # Initialize maximum gap
        max_gap = 0

        # Check the gap before the first special floor
        max_gap = max(max_gap, special[0] - bottom)

        # Check gaps between consecutive special floors
        for i in range(1, len(special)):
            max_gap = max(max_gap, special[i] - special[i - 1] - 1)

        # Check the gap after the last special floor
        max_gap = max(max_gap, top - special[-1])

        return max_gap

'''
Approach:
1. Sort the `special` array to ensure that the floors are in ascending order.
2. Compute the gap between:
   - The `bottom` floor and the first special floor.
   - Consecutive special floors.
   - The last special floor and the `top` floor.
3. Return the maximum gap found.

Time Complexity:
- Sorting the `special` array: O(n), where n is the length of `special`.
- Iterating through the sorted array to calculate gaps: O(n).
- Total: O(n).

Space Complexity:
- O(1) additional space, as the computation is done in place.
'''

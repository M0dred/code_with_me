class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        if not heights or not heights[0]:
            return []
        
        m, n = len(heights), len(heights[0])
        pacific = set()
        atlantic = set()
        
        def dfs(r: int, c: int, reachable: set):
            reachable.add((r, c))
            # Check all four directions
            for dr, dc in [(-1, 0), (0, 1), (1, 0), (0, -1)]:
                nr, nc = r + dr, c + dc
                if (0 <= nr < m and 0 <= nc < n and 
                    (nr, nc) not in reachable and 
                    heights[nr][nc] >= heights[r][c]):
                    dfs(nr, nc, reachable)
        
        # Start DFS from Pacific boundaries (top row and left column)
        for i in range(m):
            dfs(i, 0, pacific)
        for j in range(n):
            dfs(0, j, pacific)
        
        # Start DFS from Atlantic boundaries (bottom row and right column)
        for i in range(m):
            dfs(i, n - 1, atlantic)
        for j in range(n):
            dfs(m - 1, j, atlantic)
        
        # Return cells reachable by both oceans
        return [[r, c] for r, c in pacific & atlantic]

'''
Approach:
- Use DFS to find all cells that can flow to the Pacific and Atlantic oceans by flowing "uphill" (to cells with equal or greater height).
- Create two sets: pacific for cells that can reach the Pacific, and atlantic for cells that can reach the Atlantic.
- Define a DFS function that:
  - Marks the current cell as reachable.
  - Explores neighbors (north, south, east, west) if they are in bounds, unvisited, and have height >= current cell's height.
- Start DFS from Pacific boundaries (top row and left column) to populate pacific set.
- Start DFS from Atlantic boundaries (bottom row and right column) to populate atlantic set.
- Return the intersection of pacific and atlantic sets as a list of [r, c] coordinates.
- Handle edge case: empty or invalid input returns empty list.
- Time Complexity: O(m*n) where m and n are the dimensions of the heights matrix, as each cell is visited at most twice (once per DFS).
- Space Complexity: O(m*n) for the pacific and atlantic sets and DFS recursion stack.
'''

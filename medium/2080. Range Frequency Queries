from typing import List
import bisect

class RangeFreqQuery:
    def __init__(self, arr: List[int]):
        # Initialize a dictionary to map each value to a list of its indices
        self.value_to_indices = {}
        for index, value in enumerate(arr):
            if value not in self.value_to_indices:
                self.value_to_indices[value] = []
            self.value_to_indices[value].append(index)

    def query(self, left: int, right: int, value: int) -> int:
        # If the value is not present in the array, return 0
        if value not in self.value_to_indices:
            return 0

        indices = self.value_to_indices[value]
        # Find the leftmost index in 'indices' that is >= left
        left_pos = bisect.bisect_left(indices, left)
        # Find the rightmost index in 'indices' that is <= right
        right_pos = bisect.bisect_right(indices, right)
        # The frequency is the number of indices between left_pos and right_pos
        return right_pos - left_pos

# Your RangeFreqQuery object will be instantiated and called as such:
# obj = RangeFreqQuery(arr)
# param_1 = obj.query(left, right, value)

'''
Approach:
1. Initialize a dictionary to map each value in the array to a list of its indices. This allows for quick look-up of all positions where a specific value occurs.
2. For each query, check if the value exists in the dictionary. If it doesn't, return 0 as the frequency.
3. If the value exists, use binary search (bisect_left and bisect_right) to find the number of indices that fall within the [left, right] range.
4. The difference between the positions returned by bisect_right and bisect_left gives the frequency of the value in the specified subarray.

Time Complexity: O(n)
- Initialization takes O(n) time to iterate through the array and build the dictionary.
- Each query operation takes O(log m) time, where m is the number of occurrences of the queried value.

Space Complexity: O(n)
- The dictionary stores each value along with a list of its indices, resulting in O(n) space usage.
'''

class Solution:
    def maximumOr(self, nums: List[int], k: int) -> int:
        n = len(nums)

        # Precompute prefix and suffix ORs
        prefix_or = [0] * n
        suffix_or = [0] * n

        # prefix_or[i]: OR of nums[0] to nums[i - 1]
        for i in range(1, n):
            prefix_or[i] = prefix_or[i - 1] | nums[i - 1]

        # suffix_or[i]: OR of nums[i + 1] to nums[n - 1]
        for i in range(n - 2, -1, -1):
            suffix_or[i] = suffix_or[i + 1] | nums[i + 1]

        res = 0
        for i in range(n):
            # Apply operation k times to nums[i], i.e. multiply by 2^k
            increased = nums[i] << k
            # Compute the OR result if we choose nums[i] to apply the operation
            total_or = prefix_or[i] | increased | suffix_or[i]
            res = max(res, total_or)

        return res

'''
Approach:
1. Precompute prefix_or and suffix_or:
   - prefix_or[i] stores the OR from nums[0] to nums[i-1].
   - suffix_or[i] stores the OR from nums[i+1] to nums[n-1].

2. For each index `i`, we:
   - Apply k operations (multiply by 2^k), shifting nums[i] to the left by k bits.
   - Compute the total OR using prefix_or[i], the increased nums[i], and suffix_or[i].

3. Track the maximum OR result over all possible choices of index i.

Time Complexity: O(n)
- One pass for prefix_or, one pass for suffix_or, and one pass for calculating the result.

Space Complexity: O(n)
- Two arrays of size n are used to store prefix_or and suffix_or.

'''

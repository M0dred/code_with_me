class Solution:
    def minSum(self, nums1: List[int], nums2: List[int]) -> int:
        sum1 = sum(x for x in nums1 if x != 0)
        sum2 = sum(x for x in nums2 if x != 0)
        zero1 = nums1.count(0)
        zero2 = nums2.count(0)

        min1 = sum1 + zero1  # replacing zeros with 1
        min2 = sum2 + zero2

        # If one array has no zeros and is strictly smaller, we can't make them equal
        if (zero1 == 0 and min1 < min2) or (zero2 == 0 and min2 < min1):
            return -1

        return max(min1, min2)

'''
Approach:
1. Compute the sum of non-zero elements in nums1 and nums2.
2. Count the number of zeros in each array.
3. Assume the best case: replace all zeros with 1 (to compute minimal possible sum).
4. If one array has no zeros and its minimal possible sum is smaller than the other’s, it cannot catch up — return -1.
5. Otherwise, return the maximum of the two minimum possible sums, as it’s the lowest equal sum we can reach.
Time Complexity: O(n), where n is the combined length of nums1 and nums2.
Space Complexity: O(1) extra space.
'''

class Solution:
    def smallestNumber(self, pattern: str) -> str:
        stack = []
        result = []
        digit = 1  # Start assigning digits from 1

        for i in range(len(pattern) + 1):
            stack.append(str(digit))
            digit += 1

            # If current character is 'I' or it's the end of the pattern
            if i == len(pattern) or pattern[i] == 'I':
                while stack:
                    result.append(stack.pop())

        return ''.join(result)

'''
Approach:
1. Initialize a dictionary to map each value in the array to a list of its indices. This allows for quick look-up of all positions where a specific value occurs.
2. For each query, check if the value exists in the dictionary. If it doesn't, return 0 as the frequency.
3. If the value exists, use binary search (bisect_left and bisect_right) to find the number of indices that fall within the [left, right] range.
4. The difference between the positions returned by bisect_right and bisect_left gives the frequency of the value in the specified subarray.

Time Complexity: O(n)
- Initialization takes O(n) time to iterate through the array and build the dictionary.
- Each query operation takes O(log m) time, where m is the number of occurrences of the queried value.

Space Complexity: O(n)
- The dictionary stores each value along with a list of its indices, resulting in O(n) space usage.
'''

class Solution:
    def maxArea(self, height: List[int]) -> int:
        left, right = 0, len(height) - 1
        max_area = 0
        
        while left < right:
            # Calculate area with current left and right pointers
            width = right - left
            h = min(height[left], height[right])
            max_area = max(max_area, h * width)
            
            # Move the pointer with the smaller height
            if height[left] <= height[right]:
                left += 1
            else:
                right -= 1
        
        return max_area

'''
Approach:
- Use a two-pointer technique to maximize the area of water trapped.
- Initialize left pointer at index 0 and right pointer at index n-1 to maximize width initially.
- While left < right:
  - Compute area as min(height[left], height[right]) * (right - left).
  - Update max_area if the current area is larger.
  - Move the pointer with the smaller height inward (left += 1 if height[left] <= height[right], else right -= 1), as the area is limited by the shorter height.
- Return max_area.
- Time Complexity: O(n) where n is the length of height, as we traverse the array with two pointers, each moving at most n times.
- Space Complexity: O(1) as only a few variables are used.
'''

class Solution:
    def countAndSay(self, n: int) -> str:
        # Base case: n=1 returns "1"
        if n == 1:
            return "1"
        
        # Start with the first term
        result = "1"
        
        # Generate each term from 2 to n
        for _ in range(2, n + 1):
            # Initialize variables for RLE
            curr = result[0]  # Current character
            count = 1        # Count of current character
            temp = ""        # Build new term
            
            # Iterate through the string starting from second character
            for i in range(1, len(result)):
                if result[i] == curr:
                    # Same character, increment count
                    count += 1
                else:
                    # Different character, append count and character to temp
                    temp += str(count) + curr
                    curr = result[i]  # Update current character
                    count = 1        # Reset count
            
            # Append the last run
            temp += str(count) + curr
            # Update result for next iteration
            result = temp
        
        return result

'''
Approach:
1. Handle base case: if n=1, return "1".
2. Start with result = "1" (first term).
3. For each term from 2 to n:
   - Initialize variables: current character (curr), count of run (count), and temporary string (temp).
   - Iterate through result string from index 1:
     - If current character matches curr, increment count.
     - If different, append count and curr to temp, then update curr and reset count.
   - After loop, append the final run's count and character.
   - Update result to the new term.
4. Return the nth term.
Time Complexity: O(2^n) - each term can roughly double in length, and we process n terms.
Space Complexity: O(2^n) - to store the result string, which grows exponentially.
'''

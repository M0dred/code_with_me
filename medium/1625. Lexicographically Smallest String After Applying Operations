from typing import List

class Solution:
    def findLexSmallestString(self, s: str, a: int, b: int) -> str:
        n = len(s)
        a %= 10
        g = self._gcd(n, b)  # only these rotations are reachable
        
        def apply_adds(t: str, add_odd: int, add_even: int) -> str:
            # add_odd applies to 1,3,5,... ; add_even applies to 0,2,4,...
            arr = list(t)
            for i, ch in enumerate(arr):
                d = ord(ch) - 48
                if i % 2 == 1:
                    d = (d + add_odd * a) % 10
                else:
                    d = (d + add_even * a) % 10
                arr[i] = chr(48 + d)
            return "".join(arr)
        
        best = s
        # Check each distinct rotation class (step by gcd)
        for r in range(0, n, g):
            t = s[-r:] + s[:-r] if r else s
            # Odd-index addition can cycle 0..9 times.
            # If b is odd, even positions are also reachable via rotates+adds -> try 0..9 too.
            if b % 2 == 0:
                for ao in range(10):
                    candidate = apply_adds(t, ao, 0)
                    if candidate < best:
                        best = candidate
            else:
                for ao in range(10):
                    for ae in range(10):
                        candidate = apply_adds(t, ao, ae)
                        if candidate < best:
                            best = candidate
        return best

    def _gcd(self, x: int, y: int) -> int:
        while y:
            x, y = y, x % y
        return x

'''
Approach:
- Rotations by b generate only n / gcd(n, b) distinct rotations; check each one.
- Adding a (mod 10) to odd indices can be repeated up to 10 times to cover all residues.
- If b is odd, even indices can also be affected (odd positions move to even after a rotation), so try 10 options for even indices too; if b is even, even indices never change.
- For each reachable rotation:
  - If b is even: try 10 odd additions.
  - If b is odd: try 10×10 (odd, even) additions.
- Keep the lexicographically smallest result.

Time Complexity:
- O((n / gcd(n, b)) * 10) when b is even; O((n / gcd(n, b)) * 100) when b is odd. With n ≤ 100, this is small.

Space Complexity:
- O(1) extra besides a few strings/variables.
'''

class Solution:
    def minimumLength(self, s: str) -> int:
        # Step 1: Initialize a frequency array to count occurrences of each character
        char_frequency = [0] * 26

        # Step 2: Count the frequency of each character in the string
        for current_char in s:
            char_frequency[ord(current_char) - ord("a")] += 1

        # Step 3: Calculate the total length after deletions
        total_length = 0
        for frequency in char_frequency:
            if frequency == 0:
                continue  # Skip characters that don't appear
            if frequency % 2 == 0:
                total_length += 2  # If frequency is even, add 2 characters
            else:
                total_length += 1  # If frequency is odd, add 1 character

        # Step 4: Return the minimum length after deletions
        return total_length

'''
Approach:
1. **Character Frequency Count:**
   - Use an array `char_frequency` of size 26 to count occurrences of each character in the string `s`.

2. **Calculate Remaining Length:**
   - For each character:
     - If its frequency is even, it contributes 2 characters to the final string.
     - If its frequency is odd, it contributes 1 character to the final string.

3. **Return Result:**
   - Sum up contributions from all characters and return the result as the minimum length.

Time Complexity:
- O(n), where `n` is the length of the string `s`.

Space Complexity:
- O(1), as the frequency array has a fixed size of 26.
'''

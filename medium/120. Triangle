class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        # Initialize DP array with the last row of the triangle
        dp = triangle[-1][:]
        
        # Iterate from second-to-last row to the top
        for i in range(len(triangle) - 2, -1, -1):
            for j in range(len(triangle[i])):
                # For each element, choose minimum of the two possible paths below
                dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])
        
        return dp[0]

'''
Approach:
- Use bottom-up dynamic programming to compute the minimum path sum.
- Initialize a DP array with the last row of the triangle.
- Iterate from the second-to-last row to the top:
  - For each element at index j in row i, compute the minimum path sum by adding the current element (triangle[i][j]) to the minimum of the two possible elements below (dp[j] or dp[j+1]).
  - Update dp[j] with the minimum path sum for that position.
- The final answer is dp[0], representing the minimum path sum from the top.
- Time Complexity: O(n^2) where n is the number of rows, as we process each element in the triangle (total elements are n*(n+1)/2).
- Space Complexity: O(n) for the DP array, which stores one row of size up to n.
'''

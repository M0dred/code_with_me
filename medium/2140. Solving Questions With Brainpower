class Solution:
    def mostPoints(self, questions: List[List[int]]) -> int:
        n = len(questions)
        dp = [0] * (n + 1)  # dp[i] stores the max points from index i to end

        for i in range(n - 1, -1, -1):
            points, skip = questions[i]
            # Option 1: solve this question
            next_index = i + skip + 1
            solve = points + (dp[next_index] if next_index < n else 0)
            # Option 2: skip this question
            skip_q = dp[i + 1]
            # Take the better of the two
            dp[i] = max(solve, skip_q)

        return dp[0]

'''
Approach:
1. We use **bottom-up dynamic programming** starting from the end of the questions list.
2. At each index i, we compute:
   - solve: earn current points + dp[i + brainpower + 1]
   - skip: just move to the next question, i.e., dp[i + 1]
3. dp[i] = max(solve, skip), we fill the dp array backwards.
4. The result is stored in dp[0], representing the max score starting from the first question.

Time Complexity: O(n)
- We process each question once.

Space Complexity: O(n)
- dp array of size n + 1.
'''

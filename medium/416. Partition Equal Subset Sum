class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 != 0:
            return False  # If total sum is odd, cannot be equally divided

        target = total // 2
        dp = [False] * (target + 1)
        dp[0] = True  # A sum of 0 can always be achieved with no elements

        for num in nums:
            for i in range(target, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]

        return dp[target]

'''
Approach:
1. Calculate the total sum of the array. If it's odd, we cannot partition into equal subsets.
2. Set the target sum to be total // 2.
3. Use a 1D DP array where dp[i] indicates whether a subset with sum i is possible.
4. For each number in nums, update dp from target down to num to avoid overwriting needed values.
5. Finally, return whether dp[target] is True.

Time Complexity: O(n * sum/2)
- Where n is the number of elements and sum is the total sum of the array.

Space Complexity: O(sum/2)
- We use a 1D array to track possible subset sums up to sum/2.
'''

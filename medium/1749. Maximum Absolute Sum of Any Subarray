class Solution:
    def maxAbsoluteSum(self, nums: List[int]) -> int:
        """
        Returns the maximum absolute sum of any subarray.
        """
        max_sum = 0  # Maximum subarray sum
        min_sum = 0  # Minimum subarray sum
        curr_max = 0  # Current max subarray sum
        curr_min = 0  # Current min subarray sum

        for num in nums:
            curr_max = max(num, curr_max + num)  # Kadane's for max sum
            curr_min = min(num, curr_min + num)  # Kadane's for min sum
            max_sum = max(max_sum, curr_max)  # Track max sum
            min_sum = min(min_sum, curr_min)  # Track min sum
        
        return max(max_sum, abs(min_sum))

# Example Usage:
# obj = Solution()
# result = obj.maxAbsoluteSum([1,-3,2,3,-4])  # Output: 5
# print(result)

'''
Approach:
1. Use Kadaneâ€™s Algorithm to find both:
   - Maximum subarray sum.
   - Minimum subarray sum (negative of the maximum negative subarray).
2. Maintain `curr_max` for the max subarray sum and `curr_min` for the min subarray sum.
3. Track the highest `max_sum` and lowest `min_sum` across iterations.
4. Return the maximum absolute value between `max_sum` and `abs(min_sum)`.

Time Complexity: O(n)
- Single pass through the array.

Space Complexity: O(1)
- Uses only a few integer variables.
'''

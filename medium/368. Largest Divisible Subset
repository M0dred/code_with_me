class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        if not nums:
            return []
        
        nums.sort()
        n = len(nums)
        dp = [1] * n  # dp[i] = size of largest divisible subset ending with nums[i]
        prev = [-1] * n  # To reconstruct path
        max_idx = 0  # Index of max dp value

        for i in range(1, n):
            for j in range(i):
                if nums[i] % nums[j] == 0:
                    if dp[j] + 1 > dp[i]:
                        dp[i] = dp[j] + 1
                        prev[i] = j
            if dp[i] > dp[max_idx]:
                max_idx = i

        # Reconstruct the largest divisible subset
        result = []
        while max_idx != -1:
            result.append(nums[max_idx])
            max_idx = prev[max_idx]
        result.reverse()
        return result

'''
Approach:
1. Sort the array so that if a number is divisible by another, the smaller one comes first.
2. Use dynamic programming:
   - dp[i] stores the size of the largest divisible subset ending at nums[i].
   - prev[i] stores the previous index in the path to reconstruct the subset.
3. Track the maximum dp value and backtrack using the prev array to build the result.
4. Return the result in increasing order.

Time Complexity: O(n^2)
- We check divisibility for each pair (i, j) with i > j.

Space Complexity: O(n)
- For storing dp and prev arrays.
'''

class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        # Step 1: Record the last index of each character
        last_index = {ch: i for i, ch in enumerate(s)}
        partitions = []
        start = end = 0

        # Step 2: Iterate through the string
        for i, ch in enumerate(s):
            end = max(end, last_index[ch])  # Extend the end boundary
            if i == end:
                # We've reached the end of a partition
                partitions.append(end - start + 1)
                start = i + 1  # Start new partition

        return partitions

'''
Approach:
1. Record the last occurrence index of every character in the string.
2. Iterate through the string, keeping track of the current partition's end.
3. For each character, update the partition end to the farthest last occurrence among seen characters.
4. When the current index matches the partition end, we close the current partition.
5. Append the size of the partition and update the start index.

Time Complexity: O(n)
- One pass to record last indices and another pass to determine partitions.

Space Complexity: O(1)
- Only 26 lowercase English letters, so the last_index map uses constant space.
'''

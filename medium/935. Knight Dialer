class Solution:
    def knightDialer(self, n: int) -> int:
        MOD = 10**9 + 7  # Modulo to handle large results

        # Valid knight moves for each digit
        moves = {
            0: [4, 6],
            1: [6, 8],
            2: [7, 9],
            3: [4, 8],
            4: [0, 3, 9],
            5: [],
            6: [0, 1, 7],
            7: [2, 6],
            8: [1, 3],
            9: [2, 4]
        }

        # Base case: Each digit can form one number of length 1
        prev = [1] * 10

        # Compute the number of ways to reach each digit for n-1 additional moves
        for _ in range(n - 1):
            curr = [0] * 10
            for digit in range(10):
                for neighbor in moves[digit]:
                    curr[digit] = (curr[digit] + prev[neighbor]) % MOD
            prev = curr  # Update for the next step

        # Total number of phone numbers of length n
        return sum(prev) % MOD

"""
Approach:
1. Define the valid knight moves for each digit on the phone keypad.
2. Use a dynamic programming approach to calculate the number of distinct phone numbers:
   - Use `prev` to store the count of phone numbers for each digit at the current step.
   - Use `curr` to calculate the next step based on valid moves.
3. Transition from `prev` to `curr` for n-1 steps, updating the count for each digit.
4. Sum up all values in `prev` after n steps to get the total number of valid phone numbers.
5. Return the result modulo 10^9 + 7.
"""

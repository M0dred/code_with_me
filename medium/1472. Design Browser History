class BrowserHistory:

    def __init__(self, homepage: str):
        """
        Initializes the browser history with the homepage.
        """
        self.history = [homepage]  # Stores visited pages
        self.current = 0  # Current index in history
        self.length = 1  # Track valid history length (clears forward history on new visits)

    def visit(self, url: str) -> None:
        """
        Visits a new URL from the current page. Clears all forward history.
        """
        self.current += 1
        if self.current < len(self.history):
            self.history[self.current] = url  # Overwrite future history
        else:
            self.history.append(url)  # Append if no future history exists
        
        self.length = self.current + 1  # New valid history length

    def back(self, steps: int) -> str:
        """
        Moves steps back in history and returns the current URL.
        """
        self.current = max(0, self.current - steps)
        return self.history[self.current]

    def forward(self, steps: int) -> str:
        """
        Moves steps forward in history and returns the current URL.
        """
        self.current = min(self.length - 1, self.current + steps)
        return self.history[self.current]

# Your BrowserHistory object will be instantiated and called as such:
# obj = BrowserHistory(homepage)
# obj.visit(url)
# param_2 = obj.back(steps)
# param_3 = obj.forward(steps)

'''
Approach:
1. Use a list `history` to store visited URLs.
2. Maintain an index `current` to track the current page.
3. Maintain a variable `length` to track the valid history length (clears forward history on new visits).

Operations:
- `visit(url)`: Moves forward, adds a new URL, and clears forward history.
- `back(steps)`: Moves `current` pointer backward, ensuring it does not go below 0.
- `forward(steps)`: Moves `current` pointer forward, ensuring it does not exceed the valid history.

Time Complexity:
- visit: O(1)
- back: O(1)
- forward: O(1)

Space Complexity: O(n) where n is the number of visited URLs.
'''
